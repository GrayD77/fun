!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function n(t,e){e=e||nt;var n=e.createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function r(t){var e=!!t&&"length"in t&&t.length,n=gt.type(t);return"function"!==n&&!gt.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function i(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function o(t,e,n){return gt.isFunction(e)?gt.grep(t,function(t,r){return!!e.call(t,r,t)!==n}):e.nodeType?gt.grep(t,function(t){return t===e!==n}):"string"!=typeof e?gt.grep(t,function(t){return st.call(e,t)>-1!==n}):Ct.test(e)?gt.filter(e,t,n):(e=gt.filter(e,t),gt.grep(t,function(t){return st.call(e,t)>-1!==n&&1===t.nodeType}))}function a(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function s(t){var e={};return gt.each(t.match(At)||[],function(t,n){e[n]=!0}),e}function u(t){return t}function l(t){throw t}function c(t,e,n,r){var i;try{t&&gt.isFunction(i=t.promise)?i.call(t).done(e).fail(n):t&&gt.isFunction(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}function f(){nt.removeEventListener("DOMContentLoaded",f),t.removeEventListener("load",f),gt.ready()}function d(){this.expando=gt.expando+d.uid++}function p(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Lt.test(t)?JSON.parse(t):t)}function h(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(Mt,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=p(n)}catch(t){}qt.set(t,e,n)}else n=void 0;return n}function g(t,e,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return gt.css(t,e,"")},u=s(),l=n&&n[3]||(gt.cssNumber[e]?"":"px"),c=(gt.cssNumber[e]||"px"!==l&&+u)&&Ot.exec(gt.css(t,e));if(c&&c[3]!==l){l=l||c[3],n=n||[],c=+u||1;do{o=o||".5",c/=o,gt.style(t,e,c+l)}while(o!==(o=s()/u)&&1!==o&&--a)}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}function v(t){var e,n=t.ownerDocument,r=t.nodeName,i=It[r];return i||(e=n.body.appendChild(n.createElement(r)),i=gt.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),It[r]=i,i)}function m(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)r=t[o],r.style&&(n=r.style.display,e?("none"===n&&(i[o]=jt.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Ht(r)&&(i[o]=v(r))):"none"!==n&&(i[o]="none",jt.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}function y(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&i(t,e)?gt.merge([t],n):n}function x(t,e){for(var n=0,r=t.length;n<r;n++)jt.set(t[n],"globalEval",!e||jt.get(e[n],"globalEval"))}function b(t,e,n,r,i){for(var o,a,s,u,l,c,f=e.createDocumentFragment(),d=[],p=0,h=t.length;p<h;p++)if((o=t[p])||0===o)if("object"===gt.type(o))gt.merge(d,o.nodeType?[o]:o);else if(Gt.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(zt.exec(o)||["",""])[1].toLowerCase(),u=Vt[s]||Vt._default,a.innerHTML=u[1]+gt.htmlPrefilter(o)+u[2],c=u[0];c--;)a=a.lastChild;gt.merge(d,a.childNodes),a=f.firstChild,a.textContent=""}else d.push(e.createTextNode(o));for(f.textContent="",p=0;o=d[p++];)if(r&&gt.inArray(o,r)>-1)i&&i.push(o);else if(l=gt.contains(o.ownerDocument,o),a=y(f.appendChild(o),"script"),l&&x(a),n)for(c=0;o=a[c++];)Wt.test(o.type||"")&&n.push(o);return f}function w(){return!0}function C(){return!1}function F(){try{return nt.activeElement}catch(t){}}function E(t,e,n,r,i,o){var a,s;if("object"==typeof e){"string"!=typeof n&&(r=r||n,n=void 0);for(s in e)E(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=C;else if(!i)return t;return 1===o&&(a=i,i=function(t){return gt().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=gt.guid++)),t.each(function(){gt.event.add(this,e,i,r,n)})}function T(t,e){return i(t,"table")&&i(11!==e.nodeType?e:e.firstChild,"tr")?gt(">tbody",t)[0]||t:t}function S(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function A(t){var e=Kt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function k(t,e){var n,r,i,o,a,s,u,l;if(1===e.nodeType){if(jt.hasData(t)&&(o=jt.access(t),a=jt.set(e,o),l=o.events)){delete a.handle,a.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)gt.event.add(e,i,l[i][n])}qt.hasData(t)&&(s=qt.access(t),u=gt.extend({},s),qt.set(e,u))}}function D(t,e){var n=e.nodeName.toLowerCase();"input"===n&&$t.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function N(t,e,r,i){e=ot.apply([],e);var o,a,s,u,l,c,f=0,d=t.length,p=d-1,h=e[0],g=gt.isFunction(h);if(g||d>1&&"string"==typeof h&&!pt.checkClone&&Zt.test(h))return t.each(function(n){var o=t.eq(n);g&&(e[0]=h.call(this,n,o.html())),N(o,e,r,i)});if(d&&(o=b(e,t[0].ownerDocument,!1,t,i),a=o.firstChild,1===o.childNodes.length&&(o=a),a||i)){for(s=gt.map(y(o,"script"),S),u=s.length;f<d;f++)l=o,f!==p&&(l=gt.clone(l,!0,!0),u&&gt.merge(s,y(l,"script"))),r.call(t[f],l,f);if(u)for(c=s[s.length-1].ownerDocument,gt.map(s,A),f=0;f<u;f++)l=s[f],Wt.test(l.type||"")&&!jt.access(l,"globalEval")&&gt.contains(c,l)&&(l.src?gt._evalUrl&&gt._evalUrl(l.src):n(l.textContent.replace(te,""),c))}return t}function B(t,e,n){for(var r,i=e?gt.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||gt.cleanData(y(r)),r.parentNode&&(n&&gt.contains(r.ownerDocument,r)&&x(y(r,"script")),r.parentNode.removeChild(r));return t}function j(t,e,n){var r,i,o,a,s=t.style;return n=n||re(t),n&&(a=n.getPropertyValue(e)||n[e],""!==a||gt.contains(t.ownerDocument,t)||(a=gt.style(t,e)),!pt.pixelMarginRight()&&ne.test(a)&&ee.test(e)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function q(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function L(t){if(t in le)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ue.length;n--;)if((t=ue[n]+e)in le)return t}function M(t){var e=gt.cssProps[t];return e||(e=gt.cssProps[t]=L(t)||t),e}function P(t,e,n){var r=Ot.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function O(t,e,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===n&&(a+=gt.css(t,n+_t[o],!0,i)),r?("content"===n&&(a-=gt.css(t,"padding"+_t[o],!0,i)),"margin"!==n&&(a-=gt.css(t,"border"+_t[o]+"Width",!0,i))):(a+=gt.css(t,"padding"+_t[o],!0,i),"padding"!==n&&(a+=gt.css(t,"border"+_t[o]+"Width",!0,i)));return a}function _(t,e,n){var r,i=re(t),o=j(t,e,i),a="border-box"===gt.css(t,"boxSizing",!1,i);return ne.test(o)?o:(r=a&&(pt.boxSizingReliable()||o===t.style[e]),"auto"===o&&(o=t["offset"+e[0].toUpperCase()+e.slice(1)]),(o=parseFloat(o)||0)+O(t,e,n||(a?"border":"content"),r,i)+"px")}function H(t,e,n,r,i){return new H.prototype.init(t,e,n,r,i)}function R(){fe&&(!1===nt.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(R):t.setTimeout(R,gt.fx.interval),gt.fx.tick())}function I(){return t.setTimeout(function(){ce=void 0}),ce=gt.now()}function $(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)n=_t[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function z(t,e,n){for(var r,i=(G.tweeners[e]||[]).concat(G.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function W(t,e,n){var r,i,o,a,s,u,l,c,f="width"in e||"height"in e,d=this,p={},h=t.style,g=t.nodeType&&Ht(t),v=jt.get(t,"fxshow");n.queue||(a=gt._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,gt.queue(t,"fx").length||a.empty.fire()})}));for(r in e)if(i=e[r],de.test(i)){if(delete e[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}p[r]=v&&v[r]||gt.style(t,r)}if((u=!gt.isEmptyObject(e))||!gt.isEmptyObject(p)){f&&1===t.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],l=v&&v.display,null==l&&(l=jt.get(t,"display")),c=gt.css(t,"display"),"none"===c&&(l?c=l:(m([t],!0),l=t.style.display||l,c=gt.css(t,"display"),m([t]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===gt.css(t,"float")&&(u||(d.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in p)u||(v?"hidden"in v&&(g=v.hidden):v=jt.access(t,"fxshow",{display:l}),o&&(v.hidden=!g),g&&m([t],!0),d.done(function(){g||m([t]),jt.remove(t,"fxshow");for(r in p)gt.style(t,r,p[r])})),u=z(g?v[r]:0,r,d),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}}function V(t,e){var n,r,i,o,a;for(n in t)if(r=gt.camelCase(n),i=e[r],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=gt.cssHooks[r])&&"expand"in a){o=a.expand(o),delete t[r];for(n in o)n in t||(t[n]=o[n],e[n]=i)}else e[r]=i}function G(t,e,n){var r,i,o=0,a=G.prefilters.length,s=gt.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var e=ce||I(),n=Math.max(0,l.startTime+l.duration-e),r=n/l.duration||0,o=1-r,a=0,u=l.tweens.length;a<u;a++)l.tweens[a].run(o);return s.notifyWith(t,[l,o,n]),o<1&&u?n:(u||s.notifyWith(t,[l,1,0]),s.resolveWith(t,[l]),!1)},l=s.promise({elem:t,props:gt.extend({},e),opts:gt.extend(!0,{specialEasing:{},easing:gt.easing._default},n),originalProperties:e,originalOptions:n,startTime:ce||I(),duration:n.duration,tweens:[],createTween:function(e,n){var r=gt.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(r),r},stop:function(e){var n=0,r=e?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return e?(s.notifyWith(t,[l,1,0]),s.resolveWith(t,[l,e])):s.rejectWith(t,[l,e]),this}}),c=l.props;for(V(c,l.opts.specialEasing);o<a;o++)if(r=G.prefilters[o].call(l,t,c,l.opts))return gt.isFunction(r.stop)&&(gt._queueHooks(l.elem,l.opts.queue).stop=gt.proxy(r.stop,r)),r;return gt.map(c,z,l),gt.isFunction(l.opts.start)&&l.opts.start.call(t,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),gt.fx.timer(gt.extend(u,{elem:t,anim:l,queue:l.opts.queue})),l}function X(t){return(t.match(At)||[]).join(" ")}function U(t){return t.getAttribute&&t.getAttribute("class")||""}function Y(t,e,n,r){var i;if(Array.isArray(e))gt.each(e,function(e,i){n||Ce.test(t)?r(t,i):Y(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==gt.type(e))r(t,e);else for(i in e)Y(t+"["+i+"]",e[i],n,r)}function Q(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(At)||[];if(gt.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function J(t,e,n,r){function i(s){var u;return o[s]=!0,gt.each(t[s]||[],function(t,s){var l=s(e,n,r);return"string"!=typeof l||a||o[l]?a?!(u=l):void 0:(e.dataTypes.unshift(l),i(l),!1)}),u}var o={},a=t===De;return i(e.dataTypes[0])||!o["*"]&&i("*")}function Z(t,e){var n,r,i=gt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&gt.extend(!0,t,r),t}function K(t,e,n){for(var r,i,o,a,s=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||t.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}function tt(t,e,n,r){var i,o,a,s,u,l={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)l[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if(s=i.split(" "),s[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}var et=[],nt=t.document,rt=Object.getPrototypeOf,it=et.slice,ot=et.concat,at=et.push,st=et.indexOf,ut={},lt=ut.toString,ct=ut.hasOwnProperty,ft=ct.toString,dt=ft.call(Object),pt={},ht="3.2.1",gt=function(t,e){return new gt.fn.init(t,e)},vt=function(t,e){return e.toUpperCase()};gt.fn=gt.prototype={jquery:ht,constructor:gt,length:0,toArray:function(){return it.call(this)},get:function(t){return null==t?it.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=gt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return gt.each(this,t)},map:function(t){return this.pushStack(gt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(it.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:at,sort:et.sort,splice:et.splice},gt.extend=gt.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||gt.isFunction(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(t=arguments[s]))for(e in t)n=a[e],r=t[e],a!==r&&(l&&r&&(gt.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&gt.isPlainObject(n)?n:{},a[e]=gt.extend(l,o,r)):void 0!==r&&(a[e]=r));return a},gt.extend({expando:"jQuery"+(ht+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===gt.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=gt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==lt.call(t)||(e=rt(t))&&("function"!=typeof(n=ct.call(e,"constructor")&&e.constructor)||ft.call(n)!==dt))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?ut[lt.call(t)]||"object":typeof t},globalEval:function(t){n(t)},camelCase:function(t){return t.replace(/^-ms-/,"ms-").replace(/-([a-z])/g,vt)},each:function(t,e){var n,i=0;if(r(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(r(Object(t))?gt.merge(n,"string"==typeof t?[t]:t):at.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:st.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var i,o,a=0,s=[];if(r(t))for(i=t.length;a<i;a++)null!=(o=e(t[a],a,n))&&s.push(o);else for(a in t)null!=(o=e(t[a],a,n))&&s.push(o);return ot.apply([],s)},guid:1,proxy:function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),gt.isFunction(t))return r=it.call(arguments,2),i=function(){return t.apply(e||this,r.concat(it.call(arguments)))},i.guid=t.guid=t.guid||gt.guid++,i},now:Date.now,support:pt}),"function"==typeof Symbol&&(gt.fn[Symbol.iterator]=et[Symbol.iterator]),gt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){ut["[object "+e+"]"]=e.toLowerCase()});var mt=function(t){function e(t,e,n,r){var i,o,a,s,u,c,d,p=e&&e.ownerDocument,h=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==h&&9!==h&&11!==h)return n;if(!r&&((e?e.ownerDocument||e:H)!==B&&N(e),e=e||B,q)){if(11!==h&&(u=gt.exec(t)))if(i=u[1]){if(9===h){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(p&&(a=p.getElementById(i))&&O(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return Q.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&b.getElementsByClassName&&e.getElementsByClassName)return Q.apply(n,e.getElementsByClassName(i)),n}if(b.qsa&&!W[t+" "]&&(!L||!L.test(t))){if(1!==h)p=e,d=t;else if("object"!==e.nodeName.toLowerCase()){for((s=e.getAttribute("id"))?s=s.replace(xt,bt):e.setAttribute("id",s=_),c=E(t),o=c.length;o--;)c[o]="#"+s+" "+f(c[o]);d=c.join(","),p=vt.test(t)&&l(e.parentNode)||e}if(d)try{return Q.apply(n,p.querySelectorAll(d)),n}catch(t){}finally{s===_&&e.removeAttribute("id")}}}return S(t.replace(ot,"$1"),e,n,r)}function n(){function t(n,r){return e.push(n+" ")>w.cacheLength&&delete t[e.shift()],t[n+" "]=r}var e=[];return t}function r(t){return t[_]=!0,t}function i(t){var e=B.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),r=n.length;r--;)w.attrHandle[n[r]]=e}function a(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function s(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&Ct(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function u(t){return r(function(e){return e=+e,r(function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function l(t){return t&&void 0!==t.getElementsByTagName&&t}function c(){}function f(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function d(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=I++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,u){var l,c,f,d=[R,s];if(u){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,u))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(f=e[_]||(e[_]={}),c=f[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((l=c[o])&&l[0]===R&&l[1]===s)return d[2]=l[2];if(c[o]=d,d[2]=t(e,n,u))return!0}return!1}}function p(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function h(t,n,r){for(var i=0,o=n.length;i<o;i++)e(t,n[i],r);return r}function g(t,e,n,r,i){for(var o,a=[],s=0,u=t.length,l=null!=e;s<u;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),l&&e.push(s)));return a}function v(t,e,n,i,o,a){return i&&!i[_]&&(i=v(i)),o&&!o[_]&&(o=v(o,a)),r(function(r,a,s,u){var l,c,f,d=[],p=[],v=a.length,m=r||h(e||"*",s.nodeType?[s]:s,[]),y=!t||!r&&e?m:g(m,d,t,s,u),x=n?o||(r?t:v||i)?[]:a:y;if(n&&n(y,x,s,u),i)for(l=g(x,p),i(l,[],s,u),c=l.length;c--;)(f=l[c])&&(x[p[c]]=!(y[p[c]]=f));if(r){if(o||t){if(o){for(l=[],c=x.length;c--;)(f=x[c])&&l.push(y[c]=f);o(null,x=[],l,u)}for(c=x.length;c--;)(f=x[c])&&(l=o?Z(r,f):d[c])>-1&&(r[l]=!(a[l]=f))}}else x=g(x===a?x.splice(v,x.length):x),o?o(null,a,x,u):Q.apply(a,x)})}function m(t){for(var e,n,r,i=t.length,o=w.relative[t[0].type],a=o||w.relative[" "],s=o?1:0,u=d(function(t){return t===e},a,!0),l=d(function(t){return Z(e,t)>-1},a,!0),c=[function(t,n,r){var i=!o&&(r||n!==A)||((e=n).nodeType?u(t,n,r):l(t,n,r));return e=null,i}];s<i;s++)if(n=w.relative[t[s].type])c=[d(p(c),n)];else{if(n=w.filter[t[s].type].apply(null,t[s].matches),n[_]){for(r=++s;r<i&&!w.relative[t[r].type];r++);return v(s>1&&p(c),s>1&&f(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(ot,"$1"),n,s<r&&m(t.slice(s,r)),r<i&&m(t=t.slice(r)),r<i&&f(t))}c.push(n)}return p(c)}function y(t,n){var i=n.length>0,o=t.length>0,a=function(r,a,s,u,l){var c,f,d,p=0,h="0",v=r&&[],m=[],y=A,x=r||o&&w.find.TAG("*",l),b=R+=null==y?1:Math.random()||.1,C=x.length;for(l&&(A=a===B||a||l);h!==C&&null!=(c=x[h]);h++){if(o&&c){for(f=0,a||c.ownerDocument===B||(N(c),s=!q);d=t[f++];)if(d(c,a||B,s)){u.push(c);break}l&&(R=b)}i&&((c=!d&&c)&&p--,r&&v.push(c))}if(p+=h,i&&h!==p){for(f=0;d=n[f++];)d(v,m,a,s);if(r){if(p>0)for(;h--;)v[h]||m[h]||(m[h]=U.call(u));m=g(m)}Q.apply(u,m),l&&!r&&m.length>0&&p+n.length>1&&e.uniqueSort(u)}return l&&(R=b,A=y),v};return i?r(a):a}var x,b,w,C,F,E,T,S,A,k,D,N,B,j,q,L,M,P,O,_="sizzle"+1*new Date,H=t.document,R=0,I=0,$=n(),z=n(),W=n(),V=function(t,e){return t===e&&(D=!0),0},G={}.hasOwnProperty,X=[],U=X.pop,Y=X.push,Q=X.push,J=X.slice,Z=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",nt="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",rt=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+nt+")*)|.*)\\)|)",it=new RegExp(tt+"+","g"),ot=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),at=new RegExp("^"+tt+"*,"+tt+"*"),st=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),ut=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),lt=new RegExp(rt),ct=new RegExp("^"+et+"$"),ft={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+nt),PSEUDO:new RegExp("^"+rt),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,pt=/^h\d$/i,ht=/^[^{]+\{\s*\[native \w/,gt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,vt=/[+~]/,mt=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),yt=function(t,e,n){var r="0x"+e-65536;return r!==r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},xt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,bt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},wt=function(){N()},Ct=d(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{Q.apply(X=J.call(H.childNodes),H.childNodes),X[H.childNodes.length].nodeType}catch(t){Q={apply:X.length?function(t,e){Y.apply(t,J.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}b=e.support={},F=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},N=e.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:H;return r!==B&&9===r.nodeType&&r.documentElement?(B=r,j=B.documentElement,q=!F(B),H!==B&&(n=B.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",wt,!1):n.attachEvent&&n.attachEvent("onunload",wt)),b.attributes=i(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=i(function(t){return t.appendChild(B.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=ht.test(B.getElementsByClassName),b.getById=i(function(t){return j.appendChild(t).id=_,!B.getElementsByName||!B.getElementsByName(_).length}),b.getById?(w.filter.ID=function(t){var e=t.replace(mt,yt);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&q){var n=e.getElementById(t);return n?[n]:[]}}):(w.filter.ID=function(t){var e=t.replace(mt,yt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&q){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),w.find.TAG=b.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},w.find.CLASS=b.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&q)return e.getElementsByClassName(t)},M=[],L=[],(b.qsa=ht.test(B.querySelectorAll))&&(i(function(t){j.appendChild(t).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||L.push("\\["+tt+"*(?:value|"+K+")"),t.querySelectorAll("[id~="+_+"-]").length||L.push("~="),t.querySelectorAll(":checked").length||L.push(":checked"),t.querySelectorAll("a#"+_+"+*").length||L.push(".#.+[+~]")}),i(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=B.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&L.push("name"+tt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&L.push(":enabled",":disabled"),j.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&L.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),L.push(",.*:")})),(b.matchesSelector=ht.test(P=j.matches||j.webkitMatchesSelector||j.mozMatchesSelector||j.oMatchesSelector||j.msMatchesSelector))&&i(function(t){b.disconnectedMatch=P.call(t,"*"),P.call(t,"[s!='']:x"),M.push("!=",rt)}),L=L.length&&new RegExp(L.join("|")),M=M.length&&new RegExp(M.join("|")),e=ht.test(j.compareDocumentPosition),O=e||ht.test(j.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},V=e?function(t,e){if(t===e)return D=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!b.sortDetached&&e.compareDocumentPosition(t)===n?t===B||t.ownerDocument===H&&O(H,t)?-1:e===B||e.ownerDocument===H&&O(H,e)?1:k?Z(k,t)-Z(k,e):0:4&n?-1:1)}:function(t,e){if(t===e)return D=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,s=[t],u=[e];if(!i||!o)return t===B?-1:e===B?1:i?-1:o?1:k?Z(k,t)-Z(k,e):0;if(i===o)return a(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)u.unshift(n);for(;s[r]===u[r];)r++;return r?a(s[r],u[r]):s[r]===H?-1:u[r]===H?1:0},B):B},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==B&&N(t),n=n.replace(ut,"='$1']"),b.matchesSelector&&q&&!W[n+" "]&&(!M||!M.test(n))&&(!L||!L.test(n)))try{var r=P.call(t,n);if(r||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){}return e(n,B,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==B&&N(t),O(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==B&&N(t);var n=w.attrHandle[e.toLowerCase()],r=n&&G.call(w.attrHandle,e.toLowerCase())?n(t,e,!q):void 0;return void 0!==r?r:b.attributes||!q?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},e.escape=function(t){return(t+"").replace(xt,bt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],r=0,i=0;if(D=!b.detectDuplicates,k=!b.sortStable&&t.slice(0),t.sort(V),D){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return k=null,t},C=e.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=C(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=C(e);return n},w=e.selectors={cacheLength:50,createPseudo:r,match:ft,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(mt,yt),t[3]=(t[3]||t[4]||t[5]||"").replace(mt,yt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ft.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&lt.test(n)&&(e=E(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(mt,yt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=$[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&$(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(i){var o=e.attr(i,t);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(it," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,u){var l,c,f,d,p,h,g=o!==a?"nextSibling":"previousSibling",v=e.parentNode,m=s&&e.nodeName.toLowerCase(),y=!u&&!s,x=!1;if(v){if(o){for(;g;){for(d=e;d=d[g];)if(s?d.nodeName.toLowerCase()===m:1===d.nodeType)return!1;h=g="only"===t&&!h&&"nextSibling"}return!0}if(h=[a?v.firstChild:v.lastChild],a&&y){for(d=v,f=d[_]||(d[_]={}),c=f[d.uniqueID]||(f[d.uniqueID]={}),l=c[t]||[],p=l[0]===R&&l[1],x=p&&l[2],d=p&&v.childNodes[p];d=++p&&d&&d[g]||(x=p=0)||h.pop();)if(1===d.nodeType&&++x&&d===e){c[t]=[R,p,x];break}}else if(y&&(d=e,f=d[_]||(d[_]={}),c=f[d.uniqueID]||(f[d.uniqueID]={}),l=c[t]||[],p=l[0]===R&&l[1],x=p),!1===x)for(;(d=++p&&d&&d[g]||(x=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==m:1!==d.nodeType)||!++x||(y&&(f=d[_]||(d[_]={}),c=f[d.uniqueID]||(f[d.uniqueID]={}),c[t]=[R,x]),d!==e)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(t,n){var i,o=w.pseudos[t]||w.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[_]?o(n):o.length>1?(i=[t,t,"",n],w.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,e){for(var r,i=o(t,n),a=i.length;a--;)r=Z(t,i[a]),t[r]=!(e[r]=i[a])}):function(t){return o(t,0,i)}):o}},pseudos:{not:r(function(t){var e=[],n=[],i=T(t.replace(ot,"$1"));return i[_]?r(function(t,e,n,r){for(var o,a=i(t,null,r,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:r(function(t){return function(n){return e(t,n).length>0}}),contains:r(function(t){return t=t.replace(mt,yt),function(e){return(e.textContent||e.innerText||C(e)).indexOf(t)>-1}}),lang:r(function(t){return ct.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(mt,yt).toLowerCase(),function(e){var n;do{if(n=q?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===j},focus:function(t){return t===B.activeElement&&(!B.hasFocus||B.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(t){var e=t.nodeName.toLowerCase()
;return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return pt.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[n<0?n+e:n]}),even:u(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:u(function(t,e,n){for(var r=n<0?n+e:n;--r>=0;)t.push(r);return t}),gt:u(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}},w.pseudos.nth=w.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[x]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(x);for(x in{submit:!0,reset:!0})w.pseudos[x]=function(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}(x);return c.prototype=w.filters=w.pseudos,w.setFilters=new c,E=e.tokenize=function(t,n){var r,i,o,a,s,u,l,c=z[t+" "];if(c)return n?0:c.slice(0);for(s=t,u=[],l=w.preFilter;s;){r&&!(i=at.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),r=!1,(i=st.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(ot," ")}),s=s.slice(r.length));for(a in w.filter)!(i=ft[a].exec(s))||l[a]&&!(i=l[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?e.error(t):z(t,u).slice(0)},T=e.compile=function(t,e){var n,r=[],i=[],o=W[t+" "];if(!o){for(e||(e=E(t)),n=e.length;n--;)o=m(e[n]),o[_]?r.push(o):i.push(o);o=W(t,y(i,r)),o.selector=t}return o},S=e.select=function(t,e,n,r){var i,o,a,s,u,c="function"==typeof t&&t,d=!r&&E(t=c.selector||t);if(n=n||[],1===d.length){if(o=d[0]=d[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===e.nodeType&&q&&w.relative[o[1].type]){if(!(e=(w.find.ID(a.matches[0].replace(mt,yt),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(i=ft.needsContext.test(t)?0:o.length;i--&&(a=o[i],!w.relative[s=a.type]);)if((u=w.find[s])&&(r=u(a.matches[0].replace(mt,yt),vt.test(o[0].type)&&l(e.parentNode)||e))){if(o.splice(i,1),!(t=r.length&&f(o)))return Q.apply(n,r),n;break}}return(c||T(t,d))(r,e,!q,n,!e||vt.test(t)&&l(e.parentNode)||e),n},b.sortStable=_.split("").sort(V).join("")===_,b.detectDuplicates=!!D,N(),b.sortDetached=i(function(t){return 1&t.compareDocumentPosition(B.createElement("fieldset"))}),i(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&i(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),i(function(t){return null==t.getAttribute("disabled")})||o(K,function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),e}(t);gt.find=mt,gt.expr=mt.selectors,gt.expr[":"]=gt.expr.pseudos,gt.uniqueSort=gt.unique=mt.uniqueSort,gt.text=mt.getText,gt.isXMLDoc=mt.isXML,gt.contains=mt.contains,gt.escapeSelector=mt.escape;var yt=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&gt(t).is(n))break;r.push(t)}return r},xt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},bt=gt.expr.match.needsContext,wt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Ct=/^.[^:#\[\.,]*$/;gt.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?gt.find.matchesSelector(r,t)?[r]:[]:gt.find.matches(t,gt.grep(e,function(t){return 1===t.nodeType}))},gt.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(gt(t).filter(function(){for(e=0;e<r;e++)if(gt.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)gt.find(t,i[e],n);return r>1?gt.uniqueSort(n):n},filter:function(t){return this.pushStack(o(this,t||[],!1))},not:function(t){return this.pushStack(o(this,t||[],!0))},is:function(t){return!!o(this,"string"==typeof t&&bt.test(t)?gt(t):t||[],!1).length}});var Ft,Et=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(gt.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||Ft,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:Et.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof gt?e[0]:e,gt.merge(this,gt.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:nt,!0)),wt.test(r[1])&&gt.isPlainObject(e))for(r in e)gt.isFunction(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return i=nt.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):gt.isFunction(t)?void 0!==n.ready?n.ready(t):t(gt):gt.makeArray(t,this)}).prototype=gt.fn,Ft=gt(nt);var Tt=/^(?:parents|prev(?:Until|All))/,St={children:!0,contents:!0,next:!0,prev:!0};gt.fn.extend({has:function(t){var e=gt(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(gt.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&gt(t);if(!bt.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&gt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?gt.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?st.call(gt(t),this[0]):st.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(gt.uniqueSort(gt.merge(this.get(),gt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),gt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return yt(t,"parentNode")},parentsUntil:function(t,e,n){return yt(t,"parentNode",n)},next:function(t){return a(t,"nextSibling")},prev:function(t){return a(t,"previousSibling")},nextAll:function(t){return yt(t,"nextSibling")},prevAll:function(t){return yt(t,"previousSibling")},nextUntil:function(t,e,n){return yt(t,"nextSibling",n)},prevUntil:function(t,e,n){return yt(t,"previousSibling",n)},siblings:function(t){return xt((t.parentNode||{}).firstChild,t)},children:function(t){return xt(t.firstChild)},contents:function(t){return i(t,"iframe")?t.contentDocument:(i(t,"template")&&(t=t.content||t),gt.merge([],t.childNodes))}},function(t,e){gt.fn[t]=function(n,r){var i=gt.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=gt.filter(r,i)),this.length>1&&(St[t]||gt.uniqueSort(i),Tt.test(t)&&i.reverse()),this.pushStack(i)}});var At=/[^\x20\t\r\n\f]+/g;gt.Callbacks=function(t){t="string"==typeof t?s(t):gt.extend({},t);var e,n,r,i,o=[],a=[],u=-1,l=function(){for(i=i||t.once,r=e=!0;a.length;u=-1)for(n=a.shift();++u<o.length;)!1===o[u].apply(n[0],n[1])&&t.stopOnFalse&&(u=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(u=o.length-1,a.push(n)),function e(n){gt.each(n,function(n,r){gt.isFunction(r)?t.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==gt.type(r)&&e(r)})}(arguments),n&&!e&&l()),this},remove:function(){return gt.each(arguments,function(t,e){for(var n;(n=gt.inArray(e,o,n))>-1;)o.splice(n,1),n<=u&&u--}),this},has:function(t){return t?gt.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},gt.extend({Deferred:function(e){var n=[["notify","progress",gt.Callbacks("memory"),gt.Callbacks("memory"),2],["resolve","done",gt.Callbacks("once memory"),gt.Callbacks("once memory"),0,"resolved"],["reject","fail",gt.Callbacks("once memory"),gt.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return gt.Deferred(function(e){gt.each(n,function(n,r){var i=gt.isFunction(t[r[4]])&&t[r[4]];o[r[1]](function(){var t=i&&i.apply(this,arguments);t&&gt.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[r[0]+"With"](this,i?[t]:arguments)})}),t=null}).promise()},then:function(e,r,i){function o(e,n,r,i){return function(){var s=this,c=arguments,f=function(){var t,f;if(!(e<a)){if((t=r.apply(s,c))===n.promise())throw new TypeError("Thenable self-resolution");f=t&&("object"==typeof t||"function"==typeof t)&&t.then,gt.isFunction(f)?i?f.call(t,o(a,n,u,i),o(a,n,l,i)):(a++,f.call(t,o(a,n,u,i),o(a,n,l,i),o(a,n,u,n.notifyWith))):(r!==u&&(s=void 0,c=[t]),(i||n.resolveWith)(s,c))}},d=i?f:function(){try{f()}catch(t){gt.Deferred.exceptionHook&&gt.Deferred.exceptionHook(t,d.stackTrace),e+1>=a&&(r!==l&&(s=void 0,c=[t]),n.rejectWith(s,c))}};e?d():(gt.Deferred.getStackHook&&(d.stackTrace=gt.Deferred.getStackHook()),t.setTimeout(d))}}var a=0;return gt.Deferred(function(t){n[0][3].add(o(0,t,gt.isFunction(i)?i:u,t.notifyWith)),n[1][3].add(o(0,t,gt.isFunction(e)?e:u)),n[2][3].add(o(0,t,gt.isFunction(r)?r:l))}).promise()},promise:function(t){return null!=t?gt.extend(t,i):i}},o={};return gt.each(n,function(t,e){var a=e[2],s=e[5];i[e[1]]=a.add,s&&a.add(function(){r=s},n[3-t][2].disable,n[0][2].lock),a.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=a.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=it.call(arguments),o=gt.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?it.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(c(t,o.done(a(n)).resolve,o.reject,!e),"pending"===o.state()||gt.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)c(i[n],a(n),o.reject);return o.promise()}});var kt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;gt.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&kt.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},gt.readyException=function(e){t.setTimeout(function(){throw e})};var Dt=gt.Deferred();gt.fn.ready=function(t){return Dt.then(t).catch(function(t){gt.readyException(t)}),this},gt.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--gt.readyWait:gt.isReady)||(gt.isReady=!0,!0!==t&&--gt.readyWait>0||Dt.resolveWith(nt,[gt]))}}),gt.ready.then=Dt.then,"complete"===nt.readyState||"loading"!==nt.readyState&&!nt.documentElement.doScroll?t.setTimeout(gt.ready):(nt.addEventListener("DOMContentLoaded",f),t.addEventListener("load",f));var Nt=function(t,e,n,r,i,o,a){var s=0,u=t.length,l=null==n;if("object"===gt.type(n)){i=!0;for(s in n)Nt(t,e,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,gt.isFunction(r)||(a=!0),l&&(a?(e.call(t,r),e=null):(l=e,e=function(t,e,n){return l.call(gt(t),n)})),e))for(;s<u;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:l?e.call(t):u?e(t[0],n):o},Bt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};d.uid=1,d.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Bt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[gt.camelCase(e)]=n;else for(r in e)i[gt.camelCase(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][gt.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){Array.isArray(e)?e=e.map(gt.camelCase):(e=gt.camelCase(e),e=e in r?[e]:e.match(At)||[]),n=e.length;for(;n--;)delete r[e[n]]}(void 0===e||gt.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!gt.isEmptyObject(e)}};var jt=new d,qt=new d,Lt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Mt=/[A-Z]/g;gt.extend({hasData:function(t){return qt.hasData(t)||jt.hasData(t)},data:function(t,e,n){return qt.access(t,e,n)},removeData:function(t,e){qt.remove(t,e)},_data:function(t,e,n){return jt.access(t,e,n)},_removeData:function(t,e){jt.remove(t,e)}}),gt.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=qt.get(o),1===o.nodeType&&!jt.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=gt.camelCase(r.slice(5)),h(o,r,i[r])));jt.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){qt.set(this,t)}):Nt(this,function(e){var n;if(o&&void 0===e){if(void 0!==(n=qt.get(o,t)))return n;if(void 0!==(n=h(o,t)))return n}else this.each(function(){qt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){qt.remove(this,t)})}}),gt.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=jt.get(t,e),n&&(!r||Array.isArray(n)?r=jt.access(t,e,gt.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=gt.queue(t,e),r=n.length,i=n.shift(),o=gt._queueHooks(t,e),a=function(){gt.dequeue(t,e)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return jt.get(t,n)||jt.access(t,n,{empty:gt.Callbacks("once memory").add(function(){jt.remove(t,[e+"queue",n])})})}}),gt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?gt.queue(this[0],t):void 0===e?this:this.each(function(){var n=gt.queue(this,t,e);gt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&gt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){gt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=gt.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=jt.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var Pt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ot=new RegExp("^(?:([+-])=|)("+Pt+")([a-z%]*)$","i"),_t=["Top","Right","Bottom","Left"],Ht=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&gt.contains(t.ownerDocument,t)&&"none"===gt.css(t,"display")},Rt=function(t,e,n,r){var i,o,a={};for(o in e)a[o]=t.style[o],t.style[o]=e[o];i=n.apply(t,r||[]);for(o in e)t.style[o]=a[o];return i},It={};gt.fn.extend({show:function(){return m(this,!0)},hide:function(){return m(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Ht(this)?gt(this).show():gt(this).hide()})}});var $t=/^(?:checkbox|radio)$/i,zt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Wt=/^$|\/(?:java|ecma)script/i,Vt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Vt.optgroup=Vt.option,Vt.tbody=Vt.tfoot=Vt.colgroup=Vt.caption=Vt.thead,Vt.th=Vt.td;var Gt=/<|&#?\w+;/;!function(){var t=nt.createDocumentFragment(),e=t.appendChild(nt.createElement("div")),n=nt.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),pt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",pt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Xt=nt.documentElement,Ut=/^key/,Yt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qt=/^([^.]*)(?:\.(.+)|)/;gt.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=jt.get(t);if(v)for(n.handler&&(o=n,n=o.handler,i=o.selector),i&&gt.find.matchesSelector(Xt,i),n.guid||(n.guid=gt.guid++),(u=v.events)||(u=v.events={}),(a=v.handle)||(a=v.handle=function(e){return void 0!==gt&&gt.event.triggered!==e.type?gt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(At)||[""],l=e.length;l--;)s=Qt.exec(e[l])||[],p=g=s[1],h=(s[2]||"").split(".").sort(),p&&(f=gt.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=gt.event.special[p]||{},c=gt.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&gt.expr.match.needsContext.test(i),namespace:h.join(".")},o),(d=u[p])||(d=u[p]=[],d.delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),gt.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=jt.hasData(t)&&jt.get(t);if(v&&(u=v.events)){for(e=(e||"").match(At)||[""],l=e.length;l--;)if(s=Qt.exec(e[l])||[],p=g=s[1],h=(s[2]||"").split(".").sort(),p){for(f=gt.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,d=u[p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(t,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(t,h,v.handle)||gt.removeEvent(t,p,v.handle),delete u[p])}else for(p in u)gt.event.remove(t,p+e[l],n,r,!0);gt.isEmptyObject(u)&&jt.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=gt.event.fix(t),u=new Array(arguments.length),l=(jt.get(this,"events")||{})[s.type]||[],c=gt.event.special[s.type]||{};for(u[0]=s,e=1;e<arguments.length;e++)u[e]=arguments[e];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=gt.event.handlers.call(this,s,l),e=0;(i=a[e++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((gt.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(t,e){var n,r,i,o,a,s=[],u=e.delegateCount,l=t.target;if(u&&l.nodeType&&!("click"===t.type&&t.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==t.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)r=e[n],i=r.selector+" ",void 0===a[i]&&(a[i]=r.needsContext?gt(i,this).index(l)>-1:gt.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<e.length&&s.push({elem:l,handlers:e.slice(u)}),s},addProp:function(t,e){Object.defineProperty(gt.Event.prototype,t,{enumerable:!0,configurable:!0,get:gt.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[gt.expando]?t:new gt.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==F()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===F()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&i(this,"input"))return this.click(),!1},_default:function(t){return i(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},gt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},gt.Event=function(t,e){return this instanceof gt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?w:C,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&gt.extend(this,e),this.timeStamp=t&&t.timeStamp||gt.now(),void(this[gt.expando]=!0)):new gt.Event(t,e)},gt.Event.prototype={constructor:gt.Event,isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=w,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=w,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=w,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},gt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ut.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Yt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},gt.event.addProp),gt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){gt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return i&&(i===r||gt.contains(r,i))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),gt.fn.extend({on:function(t,e,n,r){return E(this,t,e,n,r)},one:function(t,e,n,r){return E(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,gt(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=C),this.each(function(){gt.event.remove(this,t,n,e)})}});var Jt=/<script|<style|<link/i,Zt=/checked\s*(?:[^=]|=\s*.checked.)/i,Kt=/^true\/(.*)/,te=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;gt.extend({htmlPrefilter:function(t){return t.replace(/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,"<$1></$2>")},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),u=gt.contains(t.ownerDocument,t);if(!(pt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||gt.isXMLDoc(t)))for(a=y(s),o=y(t),r=0,i=o.length;r<i;r++)D(o[r],a[r]);if(e)if(n)for(o=o||y(t),a=a||y(s),r=0,i=o.length;r<i;r++)k(o[r],a[r]);else k(t,s);return a=y(s,"script"),a.length>0&&x(a,!u&&y(t,"script")),s},cleanData:function(t){for(var e,n,r,i=gt.event.special,o=0;void 0!==(n=t[o]);o++)if(Bt(n)){if(e=n[jt.expando]){if(e.events)for(r in e.events)i[r]?gt.event.remove(n,r):gt.removeEvent(n,r,e.handle);n[jt.expando]=void 0}n[qt.expando]&&(n[qt.expando]=void 0)}}}),gt.fn.extend({detach:function(t){return B(this,t,!0)},remove:function(t){return B(this,t)},text:function(t){return Nt(this,function(t){return void 0===t?gt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return N(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){T(this,t).appendChild(t)}})},prepend:function(){return N(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=T(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return N(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return N(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(gt.cleanData(y(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return gt.clone(this,t,e)})},html:function(t){return Nt(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Jt.test(t)&&!Vt[(zt.exec(t)||["",""])[1].toLowerCase()]){t=gt.htmlPrefilter(t);try{for(;n<r;n++)e=this[n]||{},1===e.nodeType&&(gt.cleanData(y(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return N(this,arguments,function(e){var n=this.parentNode;gt.inArray(this,t)<0&&(gt.cleanData(y(this)),n&&n.replaceChild(e,this))},t)}}),gt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){gt.fn[t]=function(t){for(var n,r=[],i=gt(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),gt(i[a])[e](n),at.apply(r,n.get());return this.pushStack(r)}});var ee=/^margin/,ne=new RegExp("^("+Pt+")(?!px)[a-z%]+$","i"),re=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)};!function(){function e(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Xt.appendChild(a);var e=t.getComputedStyle(s);n="1%"!==e.top,o="2px"===e.marginLeft,r="4px"===e.width,s.style.marginRight="50%",i="4px"===e.marginRight,Xt.removeChild(a),s=null}}var n,r,i,o,a=nt.createElement("div"),s=nt.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",pt.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),gt.extend(pt,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return e(),r},pixelMarginRight:function(){return e(),i},reliableMarginLeft:function(){return e(),o}}))}();var ie=/^(none|table(?!-c[ea]).+)/,oe=/^--/,ae={position:"absolute",visibility:"hidden",display:"block"},se={letterSpacing:"0",fontWeight:"400"},ue=["Webkit","Moz","ms"],le=nt.createElement("div").style;gt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=j(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=gt.camelCase(e),u=oe.test(e),l=t.style;return u||(e=M(s)),a=gt.cssHooks[e]||gt.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:l[e]:(o=typeof n,"string"===o&&(i=Ot.exec(n))&&i[1]&&(n=g(t,e,i),o="number"),void(null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(gt.cssNumber[s]?"":"px")),pt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(u?l.setProperty(e,n):l[e]=n))))}},css:function(t,e,n,r){var i,o,a,s=gt.camelCase(e);return oe.test(e)||(e=M(s)),a=gt.cssHooks[e]||gt.cssHooks[s],a&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=j(t,e,r)),"normal"===i&&e in se&&(i=se[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),gt.each(["height","width"],function(t,e){gt.cssHooks[e]={get:function(t,n,r){if(n)return!ie.test(gt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?_(t,e,r):Rt(t,ae,function(){return _(t,e,r)})},set:function(t,n,r){var i,o=r&&re(t),a=r&&O(t,e,r,"border-box"===gt.css(t,"boxSizing",!1,o),o);return a&&(i=Ot.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=gt.css(t,e)),P(t,n,a)}}}),gt.cssHooks.marginLeft=q(pt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(j(t,"marginLeft"))||t.getBoundingClientRect().left-Rt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),gt.each({margin:"",padding:"",border:"Width"},function(t,e){gt.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+_t[r]+e]=o[r]||o[r-2]||o[0];return i}},ee.test(t)||(gt.cssHooks[t+e].set=P)}),gt.fn.extend({css:function(t,e){return Nt(this,function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=re(t),i=e.length;a<i;a++)o[e[a]]=gt.css(t,e[a],!1,r);return o}return void 0!==n?gt.style(t,e,n):gt.css(t,e)},t,e,arguments.length>1)}}),gt.Tween=H,H.prototype={constructor:H,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||gt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(gt.cssNumber[n]?"":"px")},cur:function(){var t=H.propHooks[this.prop];return t&&t.get?t.get(this):H.propHooks._default.get(this)},run:function(t){var e,n=H.propHooks[this.prop];return this.options.duration?this.pos=e=gt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):H.propHooks._default.set(this),this}},H.prototype.init.prototype=H.prototype,H.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=gt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){gt.fx.step[t.prop]?gt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[gt.cssProps[t.prop]]&&!gt.cssHooks[t.prop]?t.elem[t.prop]=t.now:gt.style(t.elem,t.prop,t.now+t.unit)}}},H.propHooks.scrollTop=H.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},gt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},gt.fx=H.prototype.init,gt.fx.step={};var ce,fe,de=/^(?:toggle|show|hide)$/,pe=/queueHooks$/;gt.Animation=gt.extend(G,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return g(n.elem,t,Ot.exec(e),n),n}]},tweener:function(t,e){gt.isFunction(t)?(e=t,t=["*"]):t=t.match(At);for(var n,r=0,i=t.length;r<i;r++)n=t[r],G.tweeners[n]=G.tweeners[n]||[],G.tweeners[n].unshift(e)},prefilters:[W],prefilter:function(t,e){e?G.prefilters.unshift(t):G.prefilters.push(t)}}),gt.speed=function(t,e,n){var r=t&&"object"==typeof t?gt.extend({},t):{complete:n||!n&&e||gt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!gt.isFunction(e)&&e};return gt.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in gt.fx.speeds?r.duration=gt.fx.speeds[r.duration]:r.duration=gt.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){gt.isFunction(r.old)&&r.old.call(this),r.queue&&gt.dequeue(this,r.queue)},r},gt.fn.extend({fadeTo:function(t,e,n,r){return this.filter(Ht).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=gt.isEmptyObject(t),o=gt.speed(e,n,r),a=function(){var e=G(this,gt.extend({},t),o);(i||jt.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=gt.timers,a=jt.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&pe.test(i)&&r(a[i])
;for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||gt.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=jt.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=gt.timers,a=r?r.length:0;for(n.finish=!0,gt.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),gt.each(["toggle","show","hide"],function(t,e){var n=gt.fn[e];gt.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate($(e,!0),t,r,i)}}),gt.each({slideDown:$("show"),slideUp:$("hide"),slideToggle:$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){gt.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),gt.timers=[],gt.fx.tick=function(){var t,e=0,n=gt.timers;for(ce=gt.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||gt.fx.stop(),ce=void 0},gt.fx.timer=function(t){gt.timers.push(t),gt.fx.start()},gt.fx.interval=13,gt.fx.start=function(){fe||(fe=!0,R())},gt.fx.stop=function(){fe=null},gt.fx.speeds={slow:600,fast:200,_default:400},gt.fn.delay=function(e,n){return e=gt.fx?gt.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,r){var i=t.setTimeout(n,e);r.stop=function(){t.clearTimeout(i)}})},function(){var t=nt.createElement("input"),e=nt.createElement("select"),n=e.appendChild(nt.createElement("option"));t.type="checkbox",pt.checkOn=""!==t.value,pt.optSelected=n.selected,t=nt.createElement("input"),t.value="t",t.type="radio",pt.radioValue="t"===t.value}();var he,ge=gt.expr.attrHandle;gt.fn.extend({attr:function(t,e){return Nt(this,gt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){gt.removeAttr(this,t)})}}),gt.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?gt.prop(t,e,n):(1===o&&gt.isXMLDoc(t)||(i=gt.attrHooks[e.toLowerCase()]||(gt.expr.match.bool.test(e)?he:void 0)),void 0!==n?null===n?void gt.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=gt.find.attr(t,e),null==r?void 0:r))},attrHooks:{type:{set:function(t,e){if(!pt.radioValue&&"radio"===e&&i(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(At);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),he={set:function(t,e,n){return!1===e?gt.removeAttr(t,n):t.setAttribute(n,n),n}},gt.each(gt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=ge[e]||gt.find.attr;ge[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=ge[a],ge[a]=i,i=null!=n(t,e,r)?a:null,ge[a]=o),i}});var ve=/^(?:input|select|textarea|button)$/i,me=/^(?:a|area)$/i;gt.fn.extend({prop:function(t,e){return Nt(this,gt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[gt.propFix[t]||t]})}}),gt.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&gt.isXMLDoc(t)||(e=gt.propFix[e]||e,i=gt.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=gt.find.attr(t,"tabindex");return e?parseInt(e,10):ve.test(t.nodeName)||me.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pt.optSelected||(gt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),gt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){gt.propFix[this.toLowerCase()]=this}),gt.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,u=0;if(gt.isFunction(t))return this.each(function(e){gt(this).addClass(t.call(this,e,U(this)))});if("string"==typeof t&&t)for(e=t.match(At)||[];n=this[u++];)if(i=U(n),r=1===n.nodeType&&" "+X(i)+" "){for(a=0;o=e[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");s=X(r),i!==s&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,u=0;if(gt.isFunction(t))return this.each(function(e){gt(this).removeClass(t.call(this,e,U(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(At)||[];n=this[u++];)if(i=U(n),r=1===n.nodeType&&" "+X(i)+" "){for(a=0;o=e[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");s=X(r),i!==s&&n.setAttribute("class",s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):gt.isFunction(t)?this.each(function(n){gt(this).toggleClass(t.call(this,n,U(this),e),e)}):this.each(function(){var e,r,i,o;if("string"===n)for(r=0,i=gt(this),o=t.match(At)||[];e=o[r++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==t&&"boolean"!==n||(e=U(this),e&&jt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":jt.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+X(U(n))+" ").indexOf(e)>-1)return!0;return!1}});gt.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=gt.isFunction(t),this.each(function(n){var i;1===this.nodeType&&(i=r?t.call(this,n,gt(this).val()):t,null==i?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=gt.map(i,function(t){return null==t?"":t+""})),(e=gt.valHooks[this.type]||gt.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))})):i?(e=gt.valHooks[i.type]||gt.valHooks[i.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(/\r/g,""):null==n?"":n)):void 0}}),gt.extend({valHooks:{option:{get:function(t){var e=gt.find.attr(t,"value");return null!=e?e:X(gt.text(t))}},select:{get:function(t){var e,n,r,o=t.options,a=t.selectedIndex,s="select-one"===t.type,u=s?null:[],l=s?a+1:o.length;for(r=a<0?l:s?a:0;r<l;r++)if(n=o[r],(n.selected||r===a)&&!n.disabled&&(!n.parentNode.disabled||!i(n.parentNode,"optgroup"))){if(e=gt(n).val(),s)return e;u.push(e)}return u},set:function(t,e){for(var n,r,i=t.options,o=gt.makeArray(e),a=i.length;a--;)r=i[a],(r.selected=gt.inArray(gt.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),gt.each(["radio","checkbox"],function(){gt.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=gt.inArray(gt(t).val(),e)>-1}},pt.checkOn||(gt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var ye=/^(?:focusinfocus|focusoutblur)$/;gt.extend(gt.event,{trigger:function(e,n,r,i){var o,a,s,u,l,c,f,d=[r||nt],p=ct.call(e,"type")?e.type:e,h=ct.call(e,"namespace")?e.namespace.split("."):[];if(a=s=r=r||nt,3!==r.nodeType&&8!==r.nodeType&&!ye.test(p+gt.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),l=p.indexOf(":")<0&&"on"+p,e=e[gt.expando]?e:new gt.Event(p,"object"==typeof e&&e),e.isTrigger=i?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),n=null==n?[e]:gt.makeArray(n,[e]),f=gt.event.special[p]||{},i||!f.trigger||!1!==f.trigger.apply(r,n))){if(!i&&!f.noBubble&&!gt.isWindow(r)){for(u=f.delegateType||p,ye.test(u+p)||(a=a.parentNode);a;a=a.parentNode)d.push(a),s=a;s===(r.ownerDocument||nt)&&d.push(s.defaultView||s.parentWindow||t)}for(o=0;(a=d[o++])&&!e.isPropagationStopped();)e.type=o>1?u:f.bindType||p,c=(jt.get(a,"events")||{})[e.type]&&jt.get(a,"handle"),c&&c.apply(a,n),(c=l&&a[l])&&c.apply&&Bt(a)&&(e.result=c.apply(a,n),!1===e.result&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(d.pop(),n)||!Bt(r)||l&&gt.isFunction(r[p])&&!gt.isWindow(r)&&(s=r[l],s&&(r[l]=null),gt.event.triggered=p,r[p](),gt.event.triggered=void 0,s&&(r[l]=s)),e.result}},simulate:function(t,e,n){var r=gt.extend(new gt.Event,n,{type:t,isSimulated:!0});gt.event.trigger(r,null,e)}}),gt.fn.extend({trigger:function(t,e){return this.each(function(){gt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return gt.event.trigger(t,e,n,!0)}}),gt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){gt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),gt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),pt.focusin="onfocusin"in t,pt.focusin||gt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){gt.event.simulate(e,t.target,gt.event.fix(t))};gt.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=jt.access(r,e);i||r.addEventListener(t,n,!0),jt.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=jt.access(r,e)-1;i?jt.access(r,e,i):(r.removeEventListener(t,n,!0),jt.remove(r,e))}}});var xe=t.location,be=gt.now(),we=/\?/;gt.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||gt.error("Invalid XML: "+e),n};var Ce=/\[\]$/,Fe=/^(?:submit|button|image|reset|file)$/i,Ee=/^(?:input|select|textarea|keygen)/i;gt.param=function(t,e){var n,r=[],i=function(t,e){var n=gt.isFunction(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!gt.isPlainObject(t))gt.each(t,function(){i(this.name,this.value)});else for(n in t)Y(n,t[n],e,i);return r.join("&")},gt.fn.extend({serialize:function(){return gt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=gt.prop(this,"elements");return t?gt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!gt(this).is(":disabled")&&Ee.test(this.nodeName)&&!Fe.test(t)&&(this.checked||!$t.test(t))}).map(function(t,e){var n=gt(this).val();return null==n?null:Array.isArray(n)?gt.map(n,function(t){return{name:e.name,value:t.replace(/\r?\n/g,"\r\n")}}):{name:e.name,value:n.replace(/\r?\n/g,"\r\n")}}).get()}});var Te=/^(.*?):[ \t]*([^\r\n]*)$/gm,Se=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ae=/^(?:GET|HEAD)$/,ke={},De={},Ne="*/".concat("*"),Be=nt.createElement("a");Be.href=xe.href,gt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xe.href,type:"GET",isLocal:Se.test(xe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ne,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":gt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Z(Z(t,gt.ajaxSettings),e):Z(gt.ajaxSettings,t)},ajaxPrefilter:Q(ke),ajaxTransport:Q(De),ajax:function(e,n){function r(e,n,r,s){var l,d,p,b,w,C=n;c||(c=!0,u&&t.clearTimeout(u),i=void 0,a=s||"",F.readyState=e>0?4:0,l=e>=200&&e<300||304===e,r&&(b=K(h,F,r)),b=tt(h,b,F,l),l?(h.ifModified&&(w=F.getResponseHeader("Last-Modified"),w&&(gt.lastModified[o]=w),(w=F.getResponseHeader("etag"))&&(gt.etag[o]=w)),204===e||"HEAD"===h.type?C="nocontent":304===e?C="notmodified":(C=b.state,d=b.data,p=b.error,l=!p)):(p=C,!e&&C||(C="error",e<0&&(e=0))),F.status=e,F.statusText=(n||C)+"",l?m.resolveWith(g,[d,C,F]):m.rejectWith(g,[F,C,p]),F.statusCode(x),x=void 0,f&&v.trigger(l?"ajaxSuccess":"ajaxError",[F,h,l?d:p]),y.fireWith(g,[F,C]),f&&(v.trigger("ajaxComplete",[F,h]),--gt.active||gt.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var i,o,a,s,u,l,c,f,d,p,h=gt.ajaxSetup({},n),g=h.context||h,v=h.context&&(g.nodeType||g.jquery)?gt(g):gt.event,m=gt.Deferred(),y=gt.Callbacks("once memory"),x=h.statusCode||{},b={},w={},C="canceled",F={readyState:0,getResponseHeader:function(t){var e;if(c){if(!s)for(s={};e=Te.exec(a);)s[e[1].toLowerCase()]=e[2];e=s[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(t,e){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==c&&(h.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)F.always(t[F.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||C;return i&&i.abort(e),r(0,e),this}};if(m.promise(F),h.url=((e||h.url||xe.href)+"").replace(/^\/\//,xe.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(At)||[""],null==h.crossDomain){l=nt.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Be.protocol+"//"+Be.host!=l.protocol+"//"+l.host}catch(t){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=gt.param(h.data,h.traditional)),J(ke,h,n,F),c)return F;f=gt.event&&h.global,f&&0==gt.active++&&gt.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Ae.test(h.type),o=h.url.replace(/#.*$/,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(/%20/g,"+")):(p=h.url.slice(o.length),h.data&&(o+=(we.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(/([?&])_=[^&]*/,"$1"),p=(we.test(o)?"&":"?")+"_="+be+++p),h.url=o+p),h.ifModified&&(gt.lastModified[o]&&F.setRequestHeader("If-Modified-Since",gt.lastModified[o]),gt.etag[o]&&F.setRequestHeader("If-None-Match",gt.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&F.setRequestHeader("Content-Type",h.contentType),F.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ne+"; q=0.01":""):h.accepts["*"]);for(d in h.headers)F.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(g,F,h)||c))return F.abort();if(C="abort",y.add(h.complete),F.done(h.success),F.fail(h.error),i=J(De,h,n,F)){if(F.readyState=1,f&&v.trigger("ajaxSend",[F,h]),c)return F;h.async&&h.timeout>0&&(u=t.setTimeout(function(){F.abort("timeout")},h.timeout));try{c=!1,i.send(b,r)}catch(t){if(c)throw t;r(-1,t)}}else r(-1,"No Transport");return F},getJSON:function(t,e,n){return gt.get(t,e,n,"json")},getScript:function(t,e){return gt.get(t,void 0,e,"script")}}),gt.each(["get","post"],function(t,e){gt[e]=function(t,n,r,i){return gt.isFunction(n)&&(i=i||r,r=n,n=void 0),gt.ajax(gt.extend({url:t,type:e,dataType:i,data:n,success:r},gt.isPlainObject(t)&&t))}}),gt._evalUrl=function(t){return gt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},gt.fn.extend({wrapAll:function(t){var e;return this[0]&&(gt.isFunction(t)&&(t=t.call(this[0])),e=gt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return gt.isFunction(t)?this.each(function(e){gt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=gt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=gt.isFunction(t);return this.each(function(n){gt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){gt(this).replaceWith(this.childNodes)}),this}}),gt.expr.pseudos.hidden=function(t){return!gt.expr.pseudos.visible(t)},gt.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},gt.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var je={0:200,1223:204},qe=gt.ajaxSettings.xhr();pt.cors=!!qe&&"withCredentials"in qe,pt.ajax=qe=!!qe,gt.ajaxTransport(function(e){var n,r;if(pt.cors||qe&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(t){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(je[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&t.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),gt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),gt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return gt.globalEval(t),t}}}),gt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),gt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(r,i){e=gt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),nt.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Le=[],Me=/(=)\?(?=&|$)|\?\?/;gt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Le.pop()||gt.expando+"_"+be++;return this[t]=!0,t}}),gt.ajaxPrefilter("json jsonp",function(e,n,r){var i,o,a,s=!1!==e.jsonp&&(Me.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Me.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=gt.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Me,"$1"+i):!1!==e.jsonp&&(e.url+=(we.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||gt.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=t[i],t[i]=function(){a=arguments},r.always(function(){void 0===o?gt(t).removeProp(i):t[i]=o,e[i]&&(e.jsonpCallback=n.jsonpCallback,Le.push(i)),a&&gt.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),pt.createHTMLDocument=function(){var t=nt.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),gt.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var r,i,o;return e||(pt.createHTMLDocument?(e=nt.implementation.createHTMLDocument(""),r=e.createElement("base"),r.href=nt.location.href,e.head.appendChild(r)):e=nt),i=wt.exec(t),o=!n&&[],i?[e.createElement(i[1])]:(i=b([t],e,o),o&&o.length&&gt(o).remove(),gt.merge([],i.childNodes))},gt.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=X(t.slice(s)),t=t.slice(0,s)),gt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&gt.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){o=arguments,a.html(r?gt("<div>").append(gt.parseHTML(t)).find(r):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},gt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){gt.fn[e]=function(t){return this.on(e,t)}}),gt.expr.pseudos.animated=function(t){return gt.grep(gt.timers,function(e){return t===e.elem}).length},gt.offset={setOffset:function(t,e,n){var r,i,o,a,s,u,l,c=gt.css(t,"position"),f=gt(t),d={};"static"===c&&(t.style.position="relative"),s=f.offset(),o=gt.css(t,"top"),u=gt.css(t,"left"),l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1,l?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),gt.isFunction(e)&&(e=e.call(t,n,gt.extend({},s))),null!=e.top&&(d.top=e.top-s.top+a),null!=e.left&&(d.left=e.left-s.left+i),"using"in e?e.using.call(t,d):f.css(d)}},gt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){gt.offset.setOffset(this,t,e)});var e,n,r,i,o=this[0];return o?o.getClientRects().length?(r=o.getBoundingClientRect(),e=o.ownerDocument,n=e.documentElement,i=e.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n=this[0],r={top:0,left:0};return"fixed"===gt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),i(t[0],"html")||(r=t.offset()),r={top:r.top+gt.css(t[0],"borderTopWidth",!0),left:r.left+gt.css(t[0],"borderLeftWidth",!0)}),{top:e.top-r.top-gt.css(n,"marginTop",!0),left:e.left-r.left-gt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===gt.css(t,"position");)t=t.offsetParent;return t||Xt})}}),gt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;gt.fn[t]=function(r){return Nt(this,function(t,r,i){var o;return gt.isWindow(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i?o?o[e]:t[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i)},t,r,arguments.length)}}),gt.each(["top","left"],function(t,e){gt.cssHooks[e]=q(pt.pixelPosition,function(t,n){if(n)return n=j(t,e),ne.test(n)?gt(t).position()[e]+"px":n})}),gt.each({Height:"height",Width:"width"},function(t,e){gt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){gt.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Nt(this,function(e,n,i){var o;return gt.isWindow(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?gt.css(e,n,s):gt.style(e,n,i,s)},e,a?i:void 0,a)}})}),gt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),gt.holdReady=function(t){t?gt.readyWait++:gt.ready(!0)},gt.isArray=Array.isArray,gt.parseJSON=JSON.parse,gt.nodeName=i,"function"==typeof define&&define.amd&&define("jquery",[],function(){return gt});var Pe=t.jQuery,Oe=t.$;return gt.noConflict=function(e){return t.$===gt&&(t.$=Oe),e&&t.jQuery===gt&&(t.jQuery=Pe),gt},e||(t.jQuery=t.$=gt),gt}),function(t){var e,n,r="hasOwnProperty",i=/[\.\/]/,o=function(t,e){return t-e},a={n:{}},s=function(){for(var t=0,e=this.length;t<e;t++)if(void 0!==this[t])return this[t]},u=function(){for(var t=this.length;--t;)if(void 0!==this[t])return this[t]},l=Object.prototype.toString,c=String,f=Array.isArray||function(t){return t instanceof Array||"[object Array]"==l.call(t)};eve=function(t,r){var i,a=n,l=Array.prototype.slice.call(arguments,2),c=eve.listeners(t),f=0,d=[],p={},h=[],g=e;h.firstDefined=s,h.lastDefined=u,e=t,n=0;for(var v=0,m=c.length;v<m;v++)"zIndex"in c[v]&&(d.push(c[v].zIndex),c[v].zIndex<0&&(p[c[v].zIndex]=c[v]));for(d.sort(o);d[f]<0;)if(i=p[d[f++]],h.push(i.apply(r,l)),n)return n=a,h;for(v=0;v<m;v++)if("zIndex"in(i=c[v]))if(i.zIndex==d[f]){if(h.push(i.apply(r,l)),n)break;do{if(f++,i=p[d[f]],i&&h.push(i.apply(r,l)),n)break}while(i)}else p[i.zIndex]=i;else if(h.push(i.apply(r,l)),n)break;return n=a,e=g,h},eve._events=a,eve.listeners=function(t){var e,n,r,o,s,u,l,c,d=f(t)?t:t.split(i),p=a,h=[p],g=[];for(o=0,s=d.length;o<s;o++){for(c=[],u=0,l=h.length;u<l;u++)for(p=h[u].n,n=[p[d[o]],p["*"]],r=2;r--;)(e=n[r])&&(c.push(e),g=g.concat(e.f||[]));h=c}return g},eve.separator=function(t){t?(t=c(t).replace(/(?=[\.\^\]\[\-])/g,"\\"),t="["+t+"]",i=new RegExp(t)):i=/[\.\/]/},eve.on=function(t,e){if("function"!=typeof e)return function(){};for(var n=f(t)?f(t[0])?t:[t]:c(t).split(/\s*,\s*/),r=0,o=n.length;r<o;r++)!function(t){for(var n,r=f(t)?t:c(t).split(i),o=a,s=0,u=r.length;s<u;s++)o=o.n,o=o.hasOwnProperty(r[s])&&o[r[s]]||(o[r[s]]={n:{}});for(o.f=o.f||[],s=0,u=o.f.length;s<u;s++)if(o.f[s]==e){n=!0;break}!n&&o.f.push(e)}(n[r]);return function(t){+t==+t&&(e.zIndex=+t)}},eve.f=function(t){var e=[].slice.call(arguments,1);return function(){eve.apply(null,[t,null].concat(e).concat([].slice.call(arguments,0)))}},eve.stop=function(){n=1},eve.nt=function(t){var n=f(e)?e.join("."):e;return t?new RegExp("(?:\\.|\\/|^)"+t+"(?:\\.|\\/|$)").test(n):n},eve.nts=function(){return f(e)?e:e.split(i)},eve.off=eve.unbind=function(t,e){if(!t)return void(eve._events=a={n:{}});var n=f(t)?f(t[0])?t:[t]:c(t).split(/\s*,\s*/);if(n.length>1)for(var o=0,s=n.length;o<s;o++)eve.off(n[o],e);else{n=f(t)?t:c(t).split(i);var u,l,d,o,s,p,h,g=[a],v=[];for(o=0,s=n.length;o<s;o++)for(p=0;p<g.length;p+=d.length-2){if(d=[p,1],u=g[p].n,"*"!=n[o])u[n[o]]&&(d.push(u[n[o]]),v.unshift({n:u,name:n[o]}));else for(l in u)u[r](l)&&(d.push(u[l]),v.unshift({n:u,name:l}));g.splice.apply(g,d)}for(o=0,s=g.length;o<s;o++)for(u=g[o];u.n;){if(e){if(u.f){for(p=0,h=u.f.length;p<h;p++)if(u.f[p]==e){u.f.splice(p,1);break}!u.f.length&&delete u.f}for(l in u.n)if(u.n[r](l)&&u.n[l].f){var m=u.n[l].f;for(p=0,h=m.length;p<h;p++)if(m[p]==e){m.splice(p,1);break}!m.length&&delete u.n[l].f}}else{delete u.f;for(l in u.n)u.n[r](l)&&u.n[l].f&&delete u.n[l].f}u=u.n}t:for(o=0,s=v.length;o<s;o++){u=v[o];for(l in u.n[u.name].f)continue t;for(l in u.n[u.name].n)continue t;delete u.n[u.name]}}},eve.once=function(t,e){var n=function(){return eve.off(t,n),e.apply(this,arguments)};return eve.on(t,n)},eve.version="0.5.0",eve.toString=function(){return"You are running Eve 0.5.0"},"undefined"!=typeof module&&module.exports?module.exports=eve:"function"==typeof define&&define.amd?define("eve",[],function(){return eve}):t.eve=eve}(this),function(t,e){if("function"==typeof define&&define.amd)define(["eve"],function(n){return e(t,n)});else if("undefined"!=typeof exports){var n=require("eve");module.exports=e(t,n)}else e(t,t.eve)}(window||this,function(t,e){var n=function(e){var n,r={},i=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||t.msRequestAnimationFrame||function(t){return setTimeout(t,16,(new Date).getTime()),!0},o=Array.isArray||function(t){return t instanceof Array||"[object Array]"==Object.prototype.toString.call(t)},a=0,s="M"+(+new Date).toString(36),u=function(){return s+(a++).toString(36)},l=Date.now||function(){return+new Date},c=function(t){var e=this;if(null==t)return e.s;var n=e.s-t;e.b+=e.dur*n,e.B+=e.dur*n,e.s=t},f=function(t){var e=this;if(null==t)return e.spd;e.spd=t},d=function(t){var e=this;if(null==t)return e.dur;e.s=e.s*t/e.dur,e.dur=t},p=function(){var t=this;delete r[t.id],t.update(),e("mina.stop."+t.id,t)},h=function(){var t=this;t.pdif||(delete r[t.id],t.update(),t.pdif=t.get()-t.b)},g=function(){var t=this;t.pdif&&(t.b=t.get()-t.pdif,delete t.pdif,r[t.id]=t,m())},v=function(){var t,e=this;if(o(e.start)){t=[];for(var n=0,r=e.start.length;n<r;n++)t[n]=+e.start[n]+(e.end[n]-e.start[n])*e.easing(e.s)}else t=+e.start+(e.end-e.start)*e.easing(e.s);e.set(t)},m=function(t){if(!t)return void(n||(n=i(m)));var o=0;for(var a in r)if(r.hasOwnProperty(a)){var s=r[a],u=s.get();o++,s.s=(u-s.b)/(s.dur/s.spd),s.s>=1&&(delete r[a],s.s=1,o--,function(t){setTimeout(function(){e("mina.finish."+t.id,t)})}(s)),s.update()}n=!!o&&i(m)},y=function(t,e,n,i,o,a,s){var l={id:u(),start:t,end:e,b:n,s:0,dur:i-n,spd:1,get:o,set:a,easing:s||y.linear,status:c,speed:f,duration:d,stop:p,pause:h,resume:g,update:v};r[l.id]=l;var x,b=0;for(x in r)if(r.hasOwnProperty(x)&&2==++b)break;return 1==b&&m(),l};return y.time=l,y.getById=function(t){return r[t]||null},y.linear=function(t){return t},y.easeout=function(t){return Math.pow(t,1.7)},y.easein=function(t){return Math.pow(t,.48)},y.easeinout=function(t){if(1==t)return 1;if(0==t)return 0;var e=.48-t/1.04,n=Math.sqrt(.1734+e*e),r=n-e,i=Math.pow(Math.abs(r),1/3)*(r<0?-1:1),o=-n-e,a=Math.pow(Math.abs(o),1/3)*(o<0?-1:1),s=i+a+.5;return 3*(1-s)*s*s+s*s*s},y.backin=function(t){if(1==t)return 1;var e=1.70158;return t*t*((e+1)*t-e)},y.backout=function(t){if(0==t)return 0;t-=1;var e=1.70158;return t*t*((e+1)*t+e)+1},y.elastic=function(t){return t==!!t?t:Math.pow(2,-10*t)*Math.sin((t-.075)*(2*Math.PI)/.3)+1},y.bounce=function(t){var e,n=7.5625,r=2.75;return t<1/r?e=n*t*t:t<2/r?(t-=1.5/r,e=n*t*t+.75):t<2.5/r?(t-=2.25/r,e=n*t*t+.9375):(t-=2.625/r,e=n*t*t+.984375),e},t.mina=y,y}(void 0===e?function(){}:e),r=function(t){function n(t,e){if(t){if(t.nodeType)return C(t);if(i(t,"array")&&n.set)return n.set.apply(n,t);if(t instanceof y)return t;if(null==e)try{return t=E.doc.querySelector(String(t)),C(t)}catch(t){return null}}return t=null==t?"100%":t,e=null==e?"100%":e,new w(t,e)}function r(t,e){if(e){if("#text"==t&&(t=E.doc.createTextNode(e.text||e["#text"]||"")),"#comment"==t&&(t=E.doc.createComment(e.text||e["#text"]||"")),"string"==typeof t&&(t=r(t)),"string"==typeof e)return 1==t.nodeType?"xlink:"==e.substring(0,6)?t.getAttributeNS(I,e.substring(6)):"xml:"==e.substring(0,4)?t.getAttributeNS($,e.substring(4)):t.getAttribute(e):"text"==e?t.nodeValue:null;if(1==t.nodeType){for(var n in e)if(e[T](n)){var i=S(e[n]);i?"xlink:"==n.substring(0,6)?t.setAttributeNS(I,n.substring(6),i):"xml:"==n.substring(0,4)?t.setAttributeNS($,n.substring(4),i):t.setAttribute(n,i):t.removeAttribute(n)}}else"text"in e&&(t.nodeValue=e.text)}else t=E.doc.createElementNS($,t);return t}function i(t,e){return e=S.prototype.toLowerCase.call(e),"finite"==e?isFinite(t):!("array"!=e||!(t instanceof Array||Array.isArray&&Array.isArray(t)))||("null"==e&&null===t||e==typeof t&&null!==t||"object"==e&&t===Object(t)||M.call(t).slice(8,-1).toLowerCase()==e)}function o(t){if("function"==typeof t||Object(t)!==t)return t;var e=new t.constructor;for(var n in t)t[T](n)&&(e[n]=o(t[n]));return e}function a(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return t.push(t.splice(n,1)[0])}function s(t,e,n){function r(){var i=Array.prototype.slice.call(arguments,0),o=i.join("␀"),s=r.cache=r.cache||{},u=r.count=r.count||[];return s[T](o)?(a(u,o),n?n(s[o]):s[o]):(u.length>=1e3&&delete s[u.shift()],u.push(o),s[o]=t.apply(e,i),n?n(s[o]):s[o])}return r}function u(t,e,n,r,i,o){if(null==i){var a=t-n,s=e-r;return a||s?(180+180*D.atan2(-s,-a)/q+360)%360:0}return u(t,e,i,o)-u(n,r,i,o)}function l(t){return t%360*q/180}function c(t){return 180*t/q%360}function f(t){var e=[];return t=t.replace(/(?:^|\s)(\w+)\(([^)]+)\)/g,function(t,n,r){return r=r.split(/\s*,\s*|\s+/),"rotate"==n&&1==r.length&&r.push(0,0),"scale"==n&&(r.length>2?r=r.slice(0,2):2==r.length&&r.push(0,0),1==r.length&&r.push(r[0],0,0)),"skewX"==n?e.push(["m",1,0,D.tan(l(r[0])),1,0,0]):"skewY"==n?e.push(["m",1,D.tan(l(r[0])),0,1,0,0]):e.push([n.charAt(0)].concat(r)),t}),e}function d(t,e){var r=Q(t),i=new n.Matrix;if(r)for(var o=0,a=r.length;o<a;o++){var s,u,l,c,f,d=r[o],p=d.length,h=S(d[0]).toLowerCase(),g=d[0]!=h,v=g?i.invert():0;"t"==h&&2==p?i.translate(d[1],0):"t"==h&&3==p?g?(s=v.x(0,0),u=v.y(0,0),l=v.x(d[1],d[2]),c=v.y(d[1],d[2]),i.translate(l-s,c-u)):i.translate(d[1],d[2]):"r"==h?2==p?(f=f||e,i.rotate(d[1],f.x+f.width/2,f.y+f.height/2)):4==p&&(g?(l=v.x(d[2],d[3]),c=v.y(d[2],d[3]),i.rotate(d[1],l,c)):i.rotate(d[1],d[2],d[3])):"s"==h?2==p||3==p?(f=f||e,i.scale(d[1],d[p-1],f.x+f.width/2,f.y+f.height/2)):4==p?g?(l=v.x(d[2],d[3]),c=v.y(d[2],d[3]),i.scale(d[1],d[1],l,c)):i.scale(d[1],d[1],d[2],d[3]):5==p&&(g?(l=v.x(d[3],d[4]),c=v.y(d[3],d[4]),
i.scale(d[1],d[2],l,c)):i.scale(d[1],d[2],d[3],d[4])):"m"==h&&7==p&&i.add(d[1],d[2],d[3],d[4],d[5],d[6])}return i}function p(t){var e=t.node.ownerSVGElement&&C(t.node.ownerSVGElement)||t.node.parentNode&&C(t.node.parentNode)||n.select("svg")||n(0,0),r=e.select("defs"),i=null!=r&&r.node;return i||(i=b("defs",e.node).node),i}function h(t){return t.node.ownerSVGElement&&C(t.node.ownerSVGElement)||n.select("svg")}function v(t,e,n){function i(t){if(null==t)return L;if(t==+t)return t;r(l,{width:t});try{return l.getBBox().width}catch(t){return 0}}function o(t){if(null==t)return L;if(t==+t)return t;r(l,{height:t});try{return l.getBBox().height}catch(t){return 0}}function a(r,i){null==e?u[r]=i(t.attr(r)||0):r==e&&(u=i(null==n?t.attr(r)||0:n))}var s=h(t).node,u={},l=s.querySelector(".svg---mgr");switch(l||(l=r("rect"),r(l,{x:-9e9,y:-9e9,width:10,height:10,class:"svg---mgr",fill:"none"}),s.appendChild(l)),t.type){case"rect":a("rx",i),a("ry",o);case"image":a("width",i),a("height",o);case"text":a("x",i),a("y",o);break;case"circle":a("cx",i),a("cy",o),a("r",i);break;case"ellipse":a("cx",i),a("cy",o),a("rx",i),a("ry",o);break;case"line":a("x1",i),a("x2",i),a("y1",o),a("y2",o);break;case"marker":a("refX",i),a("markerWidth",i),a("refY",o),a("markerHeight",o);break;case"radialGradient":a("fx",i),a("fy",o);break;case"tspan":a("dx",i),a("dy",o);break;default:a(e,i)}return s.removeChild(l),u}function m(t){i(t,"array")||(t=Array.prototype.slice.call(arguments,0));for(var e=0,n=0,r=this.node;this[e];)delete this[e++];for(e=0;e<t.length;e++)"set"==t[e].type?t[e].forEach(function(t){r.appendChild(t.node)}):r.appendChild(t[e].node);var o=r.childNodes;for(e=0;e<o.length;e++)this[n++]=C(o[e]);return this}function y(t){if(t.snap in z)return z[t.snap];var e;try{e=t.ownerSVGElement}catch(t){}this.node=t,e&&(this.paper=new w(e)),this.type=t.tagName||t.nodeName;var n=this.id=R(this);if(this.anims={},this._={transform:[]},t.snap=n,z[n]=this,"g"==this.type&&(this.add=m),this.type in{g:1,mask:1,pattern:1,symbol:1})for(var r in w.prototype)w.prototype[T](r)&&(this[r]=w.prototype[r])}function x(t){this.node=t}function b(t,e){var n=r(t);return e.appendChild(n),C(n)}function w(t,e){var n,i,o,a=w.prototype;if(t&&t.tagName&&"svg"==t.tagName.toLowerCase()){if(t.snap in z)return z[t.snap];var s=t.ownerDocument;n=new y(t),i=t.getElementsByTagName("desc")[0],o=t.getElementsByTagName("defs")[0],i||(i=r("desc"),i.appendChild(s.createTextNode("Created with Snap")),n.node.appendChild(i)),o||(o=r("defs"),n.node.appendChild(o)),n.defs=o;for(var u in a)a[T](u)&&(n[u]=a[u]);n.paper=n.root=n}else n=b("svg",E.doc.body),r(n.node,{height:e,version:1.1,width:t,xmlns:$});return n}function C(t){return t?t instanceof y||t instanceof x?t:t.tagName&&"svg"==t.tagName.toLowerCase()?new w(t):t.tagName&&"object"==t.tagName.toLowerCase()&&"image/svg+xml"==t.type?new w(t.contentDocument.getElementsByTagName("svg")[0]):new y(t):t}function F(t,e){for(var n=0,r=t.length;n<r;n++){var i={type:t[n].type,attr:t[n].attr()},o=t[n].children();e.push(i),o.length&&F(o,i.childNodes=[])}}n.version="0.5.1",n.toString=function(){return"Snap v"+this.version},n._={};var E={win:t.window,doc:t.window.document};n._.glob=E;var T="hasOwnProperty",S=String,A=parseFloat,k=parseInt,D=Math,N=D.max,B=D.min,j=D.abs,q=(D.pow,D.PI),L=(D.round,""),M=Object.prototype.toString,P=(n._.separator=/[,\s]+/,{hs:1,rg:1}),O=/(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\s]*,?[\s]*/gi,_=0,H="S"+(+new Date).toString(36),R=function(t){return(t&&t.type?t.type:L)+H+(_++).toString(36)},I="http://www.w3.org/1999/xlink",$="http://www.w3.org/2000/svg",z={};n.url=function(t){return"url('#"+t+"')"};n._.$=r,n._.id=R,n.format=function(){var t=function(t,e,n){var r=n;return e.replace(/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,function(t,e,n,i,o){e=e||i,r&&(e in r&&(r=r[e]),"function"==typeof r&&o&&(r=r()))}),r=(null==r||r==n?t:r)+""};return function(e,n){return S(e).replace(/\{([^\}]+)\}/g,function(e,r){return t(e,r,n)})}}(),n._.clone=o,n._.cacher=s,n.rad=l,n.deg=c,n.sin=function(t){return D.sin(n.rad(t))},n.tan=function(t){return D.tan(n.rad(t))},n.cos=function(t){return D.cos(n.rad(t))},n.asin=function(t){return n.deg(D.asin(t))},n.acos=function(t){return n.deg(D.acos(t))},n.atan=function(t){return n.deg(D.atan(t))},n.atan2=function(t){return n.deg(D.atan2(t))},n.angle=u,n.len=function(t,e,r,i){return Math.sqrt(n.len2(t,e,r,i))},n.len2=function(t,e,n,r){return(t-n)*(t-n)+(e-r)*(e-r)},n.closestPoint=function(t,e,n){function r(t){var r=t.x-e,i=t.y-n;return r*r+i*i}for(var i,o,a,s,u=t.node,l=u.getTotalLength(),c=l/u.pathSegList.numberOfItems*.125,f=1/0,d=0;d<=l;d+=c)(s=r(a=u.getPointAtLength(d)))<f&&(i=a,o=d,f=s);for(c*=.5;c>.5;){var p,h,g,v,m,y;(g=o-c)>=0&&(m=r(p=u.getPointAtLength(g)))<f?(i=p,o=g,f=m):(v=o+c)<=l&&(y=r(h=u.getPointAtLength(v)))<f?(i=h,o=v,f=y):c*=.5}return i={x:i.x,y:i.y,length:o,distance:Math.sqrt(f)}},n.is=i,n.snapTo=function(t,e,n){if(n=i(n,"finite")?n:10,i(t,"array")){for(var r=t.length;r--;)if(j(t[r]-e)<=n)return t[r]}else{t=+t;var o=e%t;if(o<n)return e-o;if(o>t-n)return e-o+t}return e},n.getRGB=s(function(t){if(!t||(t=S(t)).indexOf("-")+1)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:X};if("none"==t)return{r:-1,g:-1,b:-1,hex:"none",toString:X};if(!(P[T](t.toLowerCase().substring(0,2))||"#"==t.charAt())&&(t=W(t)),!t)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:X};var e,r,o,a,s,u,l=t.match(/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\))\s*$/i);return l?(l[2]&&(o=k(l[2].substring(5),16),r=k(l[2].substring(3,5),16),e=k(l[2].substring(1,3),16)),l[3]&&(o=k((s=l[3].charAt(3))+s,16),r=k((s=l[3].charAt(2))+s,16),e=k((s=l[3].charAt(1))+s,16)),l[4]&&(u=l[4].split(/[\s]*,[\s]*/),e=A(u[0]),"%"==u[0].slice(-1)&&(e*=2.55),r=A(u[1]),"%"==u[1].slice(-1)&&(r*=2.55),o=A(u[2]),"%"==u[2].slice(-1)&&(o*=2.55),"rgba"==l[1].toLowerCase().slice(0,4)&&(a=A(u[3])),u[3]&&"%"==u[3].slice(-1)&&(a/=100)),l[5]?(u=l[5].split(/[\s]*,[\s]*/),e=A(u[0]),"%"==u[0].slice(-1)&&(e/=100),r=A(u[1]),"%"==u[1].slice(-1)&&(r/=100),o=A(u[2]),"%"==u[2].slice(-1)&&(o/=100),("deg"==u[0].slice(-3)||"°"==u[0].slice(-1))&&(e/=360),"hsba"==l[1].toLowerCase().slice(0,4)&&(a=A(u[3])),u[3]&&"%"==u[3].slice(-1)&&(a/=100),n.hsb2rgb(e,r,o,a)):l[6]?(u=l[6].split(/[\s]*,[\s]*/),e=A(u[0]),"%"==u[0].slice(-1)&&(e/=100),r=A(u[1]),"%"==u[1].slice(-1)&&(r/=100),o=A(u[2]),"%"==u[2].slice(-1)&&(o/=100),("deg"==u[0].slice(-3)||"°"==u[0].slice(-1))&&(e/=360),"hsla"==l[1].toLowerCase().slice(0,4)&&(a=A(u[3])),u[3]&&"%"==u[3].slice(-1)&&(a/=100),n.hsl2rgb(e,r,o,a)):(e=B(D.round(e),255),r=B(D.round(r),255),o=B(D.round(o),255),a=B(N(a,0),1),l={r:e,g:r,b:o,toString:X},l.hex="#"+(16777216|o|r<<8|e<<16).toString(16).slice(1),l.opacity=i(a,"finite")?a:1,l)):{r:-1,g:-1,b:-1,hex:"none",error:1,toString:X}},n),n.hsb=s(function(t,e,r){return n.hsb2rgb(t,e,r).hex}),n.hsl=s(function(t,e,r){return n.hsl2rgb(t,e,r).hex}),n.rgb=s(function(t,e,n,r){if(i(r,"finite")){var o=D.round;return"rgba("+[o(t),o(e),o(n),+r.toFixed(2)]+")"}return"#"+(16777216|n|e<<8|t<<16).toString(16).slice(1)});var W=function(t){var e=E.doc.getElementsByTagName("head")[0]||E.doc.getElementsByTagName("svg")[0],n="rgb(255, 0, 0)";return(W=s(function(t){if("red"==t.toLowerCase())return n;e.style.color=n,e.style.color=t;var r=E.doc.defaultView.getComputedStyle(e,L).getPropertyValue("color");return r==n?null:r}))(t)},V=function(){return"hsb("+[this.h,this.s,this.b]+")"},G=function(){return"hsl("+[this.h,this.s,this.l]+")"},X=function(){return 1==this.opacity||null==this.opacity?this.hex:"rgba("+[this.r,this.g,this.b,this.opacity]+")"},U=function(t,e,r){if(null==e&&i(t,"object")&&"r"in t&&"g"in t&&"b"in t&&(r=t.b,e=t.g,t=t.r),null==e&&i(t,string)){var o=n.getRGB(t);t=o.r,e=o.g,r=o.b}return(t>1||e>1||r>1)&&(t/=255,e/=255,r/=255),[t,e,r]},Y=function(t,e,r,o){t=D.round(255*t),e=D.round(255*e),r=D.round(255*r);var a={r:t,g:e,b:r,opacity:i(o,"finite")?o:1,hex:n.rgb(t,e,r),toString:X};return i(o,"finite")&&(a.opacity=o),a};n.color=function(t){var e;return i(t,"object")&&"h"in t&&"s"in t&&"b"in t?(e=n.hsb2rgb(t),t.r=e.r,t.g=e.g,t.b=e.b,t.opacity=1,t.hex=e.hex):i(t,"object")&&"h"in t&&"s"in t&&"l"in t?(e=n.hsl2rgb(t),t.r=e.r,t.g=e.g,t.b=e.b,t.opacity=1,t.hex=e.hex):(i(t,"string")&&(t=n.getRGB(t)),i(t,"object")&&"r"in t&&"g"in t&&"b"in t&&!("error"in t)?(e=n.rgb2hsl(t),t.h=e.h,t.s=e.s,t.l=e.l,e=n.rgb2hsb(t),t.v=e.b):(t={hex:"none"},t.r=t.g=t.b=t.h=t.s=t.v=t.l=-1,t.error=1)),t.toString=X,t},n.hsb2rgb=function(t,e,n,r){i(t,"object")&&"h"in t&&"s"in t&&"b"in t&&(n=t.b,e=t.s,r=t.o,t=t.h),t*=360;var o,a,s,u,l;return t=t%360/60,l=n*e,u=l*(1-j(t%2-1)),o=a=s=n-l,t=~~t,o+=[l,u,0,0,u,l][t],a+=[u,l,l,u,0,0][t],s+=[0,0,u,l,l,u][t],Y(o,a,s,r)},n.hsl2rgb=function(t,e,n,r){i(t,"object")&&"h"in t&&"s"in t&&"l"in t&&(n=t.l,e=t.s,t=t.h),(t>1||e>1||n>1)&&(t/=360,e/=100,n/=100),t*=360;var o,a,s,u,l;return t=t%360/60,l=2*e*(n<.5?n:1-n),u=l*(1-j(t%2-1)),o=a=s=n-l/2,t=~~t,o+=[l,u,0,0,u,l][t],a+=[u,l,l,u,0,0][t],s+=[0,0,u,l,l,u][t],Y(o,a,s,r)},n.rgb2hsb=function(t,e,n){n=U(t,e,n),t=n[0],e=n[1],n=n[2];var r,i,o,a;return o=N(t,e,n),a=o-B(t,e,n),r=0==a?null:o==t?(e-n)/a:o==e?(n-t)/a+2:(t-e)/a+4,r=(r+360)%6*60/360,i=0==a?0:a/o,{h:r,s:i,b:o,toString:V}},n.rgb2hsl=function(t,e,n){n=U(t,e,n),t=n[0],e=n[1],n=n[2];var r,i,o,a,s,u;return a=N(t,e,n),s=B(t,e,n),u=a-s,r=0==u?null:a==t?(e-n)/u:a==e?(n-t)/u+2:(t-e)/u+4,r=(r+360)%6*60/360,o=(a+s)/2,i=0==u?0:o<.5?u/(2*o):u/(2-2*o),{h:r,s:i,l:o,toString:G}},n.parsePathString=function(t){if(!t)return null;var e=n.path(t);if(e.arr)return n.path.clone(e.arr);var r={a:7,c:6,o:2,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,u:3,z:0},o=[];return i(t,"array")&&i(t[0],"array")&&(o=n.path.clone(t)),o.length||S(t).replace(/([a-z])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,function(t,e,n){var i=[],a=e.toLowerCase();if(n.replace(O,function(t,e){e&&i.push(+e)}),"m"==a&&i.length>2&&(o.push([e].concat(i.splice(0,2))),a="l",e="m"==e?"l":"L"),"o"==a&&1==i.length&&o.push([e,i[0]]),"r"==a)o.push([e].concat(i));else for(;i.length>=r[a]&&(o.push([e].concat(i.splice(0,r[a]))),r[a]););}),o.toString=n.path.toString,e.arr=n.path.clone(o),o};var Q=n.parseTransformString=function(t){if(!t)return null;var e=[];return i(t,"array")&&i(t[0],"array")&&(e=n.path.clone(t)),e.length||S(t).replace(/([rstm])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/gi,function(t,n,r){var i=[];n.toLowerCase();r.replace(O,function(t,e){e&&i.push(+e)}),e.push([n].concat(i))}),e.toString=n.path.toString,e};n._.svgTransform2string=f,n._.rgTransform=/^[a-z][\s]*-?\.?\d/i,n._.transform2matrix=d,n._unit2px=v;E.doc.contains||E.doc.compareDocumentPosition;n._.getSomeDefs=p,n._.getSomeSVG=h,n.select=function(t){return t=S(t).replace(/([^\\]):/g,"$1\\:"),C(E.doc.querySelector(t))},n.selectAll=function(t){for(var e=E.doc.querySelectorAll(t),r=(n.set||Array)(),i=0;i<e.length;i++)r.push(C(e[i]));return r},setInterval(function(){for(var t in z)if(z[T](t)){var e=z[t],n=e.node;("svg"!=e.type&&!n.ownerSVGElement||"svg"==e.type&&(!n.parentNode||"ownerSVGElement"in n.parentNode&&!n.ownerSVGElement))&&delete z[t]}},1e4),y.prototype.attr=function(t,n){var r=this,o=r.node;if(!t){if(1!=o.nodeType)return{text:o.nodeValue};for(var a=o.attributes,s={},u=0,l=a.length;u<l;u++)s[a[u].nodeName]=a[u].nodeValue;return s}if(i(t,"string")){if(!(arguments.length>1))return e("snap.util.getattr."+t,r).firstDefined();var c={};c[t]=n,t=c}for(var f in t)t[T](f)&&e("snap.util.attr."+f,r,t[f]);return r},n.parse=function(t){var e=E.doc.createDocumentFragment(),n=!0,r=E.doc.createElement("div");if(t=S(t),t.match(/^\s*<\s*svg(?:\s|>)/)||(t="<svg>"+t+"</svg>",n=!1),r.innerHTML=t,t=r.getElementsByTagName("svg")[0])if(n)e=t;else for(;t.firstChild;)e.appendChild(t.firstChild);return new x(e)},n.fragment=function(){for(var t=Array.prototype.slice.call(arguments,0),e=E.doc.createDocumentFragment(),r=0,i=t.length;r<i;r++){var o=t[r];o.node&&o.node.nodeType&&e.appendChild(o.node),o.nodeType&&e.appendChild(o),"string"==typeof o&&e.appendChild(n.parse(o).node)}return new x(e)},n._.make=b,n._.wrap=C,w.prototype.el=function(t,e){var n=b(t,this.node);return e&&n.attr(e),n},y.prototype.children=function(){for(var t=[],e=this.node.childNodes,r=0,i=e.length;r<i;r++)t[r]=n(e[r]);return t},y.prototype.toJSON=function(){var t=[];return F([this],t),t[0]},e.on("snap.util.getattr",function(){var t=e.nt();t=t.substring(t.lastIndexOf(".")+1);var n=t.replace(/[A-Z]/g,function(t){return"-"+t.toLowerCase()});return J[T](n)?this.node.ownerDocument.defaultView.getComputedStyle(this.node,null).getPropertyValue(n):r(this.node,t)});var J={"alignment-baseline":0,"baseline-shift":0,clip:0,"clip-path":0,"clip-rule":0,color:0,"color-interpolation":0,"color-interpolation-filters":0,"color-profile":0,"color-rendering":0,cursor:0,direction:0,display:0,"dominant-baseline":0,"enable-background":0,fill:0,"fill-opacity":0,"fill-rule":0,filter:0,"flood-color":0,"flood-opacity":0,font:0,"font-family":0,"font-size":0,"font-size-adjust":0,"font-stretch":0,"font-style":0,"font-variant":0,"font-weight":0,"glyph-orientation-horizontal":0,"glyph-orientation-vertical":0,"image-rendering":0,kerning:0,"letter-spacing":0,"lighting-color":0,marker:0,"marker-end":0,"marker-mid":0,"marker-start":0,mask:0,opacity:0,overflow:0,"pointer-events":0,"shape-rendering":0,"stop-color":0,"stop-opacity":0,stroke:0,"stroke-dasharray":0,"stroke-dashoffset":0,"stroke-linecap":0,"stroke-linejoin":0,"stroke-miterlimit":0,"stroke-opacity":0,"stroke-width":0,"text-anchor":0,"text-decoration":0,"text-rendering":0,"unicode-bidi":0,visibility:0,"word-spacing":0,"writing-mode":0};e.on("snap.util.attr",function(t){var n=e.nt(),i={};n=n.substring(n.lastIndexOf(".")+1),i[n]=t;var o=n.replace(/-(\w)/gi,function(t,e){return e.toUpperCase()}),a=n.replace(/[A-Z]/g,function(t){return"-"+t.toLowerCase()});J[T](a)?this.node.style[o]=null==t?L:t:r(this.node,i)}),w.prototype,n.ajax=function(t,n,r,o){var a=new XMLHttpRequest,s=R();if(a){if(i(n,"function"))o=r,r=n,n=null;else if(i(n,"object")){var u=[];for(var l in n)n.hasOwnProperty(l)&&u.push(encodeURIComponent(l)+"="+encodeURIComponent(n[l]));n=u.join("&")}return a.open(n?"POST":"GET",t,!0),(n&&(a.setRequestHeader("X-Requested-With","XMLHttpRequest"),a.setRequestHeader("Content-type","application/x-www-form-urlencoded")),r&&(e.once("snap.ajax."+s+".0",r),e.once("snap.ajax."+s+".200",r),e.once("snap.ajax."+s+".304",r)),a.onreadystatechange=function(){4==a.readyState&&e("snap.ajax."+s+"."+a.status,o,a)},4==a.readyState)?a:(a.send(n),a)}},n.load=function(t,e,r){n.ajax(t,function(t){var i=n.parse(t.responseText);r?e.call(r,i):e(i)})};var Z=function(t){var e=t.getBoundingClientRect(),n=t.ownerDocument,r=n.body,i=n.documentElement,o=i.clientTop||r.clientTop||0,a=i.clientLeft||r.clientLeft||0;return{y:e.top+(g.win.pageYOffset||i.scrollTop||r.scrollTop)-o,x:e.left+(g.win.pageXOffset||i.scrollLeft||r.scrollLeft)-a}};return n.getElementByPoint=function(t,e){var n=this,r=(n.canvas,E.doc.elementFromPoint(t,e));if(E.win.opera&&"svg"==r.tagName){var i=Z(r),o=r.createSVGRect();o.x=t-i.x,o.y=e-i.y,o.width=o.height=1;var a=r.getIntersectionList(o,null);a.length&&(r=a[a.length-1])}return r?C(r):null},n.plugin=function(t){t(n,y,w,E,x)},E.win.Snap=n,n}(t||this);return r.plugin(function(n,r,i,o,a){function s(t,e){if(null==e){var r=!0;if(!(e="linearGradient"==t.type||"radialGradient"==t.type?t.node.getAttribute("gradientTransform"):"pattern"==t.type?t.node.getAttribute("patternTransform"):t.node.getAttribute("transform")))return new n.Matrix;e=n._.svgTransform2string(e)}else e=n._.rgTransform.test(e)?d(e).replace(/\.{3}|\u2026/g,t._.transform||""):n._.svgTransform2string(e),f(e,"array")&&(e=n.path?n.path.toString.call(e):d(e)),t._.transform=e;var i=n._.transform2matrix(e,t.getBBox(1));if(r)return i;t.matrix=i}function u(t){function e(t,e){var r=h(t.node,e);r=r&&r.match(o),(r=r&&r[2])&&"#"==r.charAt()&&(r=r.substring(1))&&(s[r]=(s[r]||[]).concat(function(r){var i={};i[e]=n.url(r),h(t.node,i)}))}for(var r,i=t.selectAll("*"),o=/^\s*url\(("|'|)(.*)\1\)\s*$/,a=[],s={},u=0,l=i.length;u<l;u++){r=i[u],e(r,"fill"),e(r,"stroke"),e(r,"filter"),e(r,"mask"),e(r,"clip-path"),function(t){var e=h(t.node,"xlink:href");e&&"#"==e.charAt()&&(e=e.substring(1))&&(s[e]=(s[e]||[]).concat(function(e){t.attr("xlink:href","#"+e)}))}(r);var c=h(r.node,"id");c&&(h(r.node,{id:r.id}),a.push({old:c,id:r.id}))}for(u=0,l=a.length;u<l;u++){var f=s[a[u].old];if(f)for(var d=0,p=f.length;d<p;d++)f[d](a[u].id)}}function l(t){return function(){var e=t?"<"+this.type:"",n=this.node.attributes,r=this.node.childNodes;if(t)for(var i=0,o=n.length;i<o;i++)e+=" "+n[i].name+'="'+n[i].value.replace(/"/g,'\\"')+'"';if(r.length){for(t&&(e+=">"),i=0,o=r.length;i<o;i++)3==r[i].nodeType?e+=r[i].nodeValue:1==r[i].nodeType&&(e+=m(r[i]).toString());t&&(e+="</"+this.type+">")}else t&&(e+="/>");return e}}var c=r.prototype,f=n.is,d=String,p=n._unit2px,h=n._.$,g=n._.make,v=n._.getSomeDefs,m=n._.wrap;c.getBBox=function(t){if("tspan"==this.type)return n._.box(this.node.getClientRects().item(0));if(!n.Matrix||!n.path)return this.node.getBBox();var e=this,r=new n.Matrix;if(e.removed)return n._.box();for(;"use"==e.type;)if(t||(r=r.add(e.transform().localMatrix.translate(e.attr("x")||0,e.attr("y")||0))),e.original)e=e.original;else{var i=e.attr("xlink:href");e=e.original=e.node.ownerDocument.getElementById(i.substring(i.indexOf("#")+1))}var o=e._,a=n.path.get[e.type]||n.path.get.deflt;try{return t?(o.bboxwt=a?n.path.getBBox(e.realPath=a(e)):n._.box(e.node.getBBox()),n._.box(o.bboxwt)):(e.realPath=a(e),e.matrix=e.transform().localMatrix,o.bbox=n.path.getBBox(n.path.map(e.realPath,r.add(e.matrix))),n._.box(o.bbox))}catch(t){return n._.box()}};var y=function(){return this.string};c.transform=function(t){var e=this._;if(null==t){for(var r,i=this,o=new n.Matrix(this.node.getCTM()),a=s(this),u=[a],l=new n.Matrix,c=a.toTransformString(),f=d(a)==d(this.matrix)?d(e.transform):c;"svg"!=i.type&&(i=i.parent());)u.push(s(i));for(r=u.length;r--;)l.add(u[r]);return{string:f,globalMatrix:o,totalMatrix:l,localMatrix:a,diffMatrix:o.clone().add(a.invert()),global:o.toTransformString(),total:l.toTransformString(),local:c,toString:y}}return t instanceof n.Matrix?(this.matrix=t,this._.transform=t.toTransformString()):s(this,t),this.node&&("linearGradient"==this.type||"radialGradient"==this.type?h(this.node,{gradientTransform:this.matrix}):"pattern"==this.type?h(this.node,{patternTransform:this.matrix}):h(this.node,{transform:this.matrix})),this},c.parent=function(){return m(this.node.parentNode)},c.append=c.add=function(t){if(t){if("set"==t.type){var e=this;return t.forEach(function(t){e.add(t)}),this}t=m(t),this.node.appendChild(t.node),t.paper=this.paper}return this},c.appendTo=function(t){return t&&(t=m(t),t.append(this)),this},c.prepend=function(t){if(t){if("set"==t.type){var e,n=this;return t.forEach(function(t){e?e.after(t):n.prepend(t),e=t}),this}t=m(t);var r=t.parent();this.node.insertBefore(t.node,this.node.firstChild),this.add&&this.add(),t.paper=this.paper,this.parent()&&this.parent().add(),r&&r.add()}return this},c.prependTo=function(t){return t=m(t),t.prepend(this),this},c.before=function(t){if("set"==t.type){var e=this;return t.forEach(function(t){var n=t.parent();e.node.parentNode.insertBefore(t.node,e.node),n&&n.add()}),this.parent().add(),this}t=m(t);var n=t.parent();return this.node.parentNode.insertBefore(t.node,this.node),this.parent()&&this.parent().add(),n&&n.add(),t.paper=this.paper,this},c.after=function(t){t=m(t);var e=t.parent();return this.node.nextSibling?this.node.parentNode.insertBefore(t.node,this.node.nextSibling):this.node.parentNode.appendChild(t.node),this.parent()&&this.parent().add(),e&&e.add(),t.paper=this.paper,this},c.insertBefore=function(t){t=m(t);var e=this.parent();return t.node.parentNode.insertBefore(this.node,t.node),this.paper=t.paper,e&&e.add(),t.parent()&&t.parent().add(),this},c.insertAfter=function(t){t=m(t);var e=this.parent();return t.node.parentNode.insertBefore(this.node,t.node.nextSibling),this.paper=t.paper,e&&e.add(),t.parent()&&t.parent().add(),this},c.remove=function(){var t=this.parent();return this.node.parentNode&&this.node.parentNode.removeChild(this.node),delete this.paper,this.removed=!0,t&&t.add(),this},c.select=function(t){return m(this.node.querySelector(t))},c.selectAll=function(t){for(var e=this.node.querySelectorAll(t),r=(n.set||Array)(),i=0;i<e.length;i++)r.push(m(e[i]));return r},c.asPX=function(t,e){return null==e&&(e=this.attr(t)),+p(this,t,e)},c.use=function(){var t,e=this.node.id;return e||(e=this.id,h(this.node,{id:e})),t="linearGradient"==this.type||"radialGradient"==this.type||"pattern"==this.type?g(this.type,this.node.parentNode):g("use",this.node.parentNode),h(t.node,{"xlink:href":"#"+e}),t.original=this,t},c.clone=function(){var t=m(this.node.cloneNode(!0));return h(t.node,"id")&&h(t.node,{id:t.id}),u(t),t.insertAfter(this),t},c.toDefs=function(){return v(this).appendChild(this.node),this},c.pattern=c.toPattern=function(t,e,n,r){var i=g("pattern",v(this));return null==t&&(t=this.getBBox()),f(t,"object")&&"x"in t&&(e=t.y,n=t.width,r=t.height,t=t.x),h(i.node,{x:t,y:e,width:n,height:r,patternUnits:"userSpaceOnUse",id:i.id,viewBox:[t,e,n,r].join(" ")}),i.node.appendChild(this.node),i},c.marker=function(t,e,n,r,i,o){var a=g("marker",v(this));return null==t&&(t=this.getBBox()),f(t,"object")&&"x"in t&&(e=t.y,n=t.width,r=t.height,i=t.refX||t.cx,o=t.refY||t.cy,t=t.x),h(a.node,{viewBox:[t,e,n,r].join(" "),markerWidth:n,markerHeight:r,orient:"auto",refX:i||0,refY:o||0,id:a.id}),a.node.appendChild(this.node),a};var x={};c.data=function(t,r){var i=x[this.id]=x[this.id]||{};if(0==arguments.length)return e("snap.data.get."+this.id,this,i,null),i;if(1==arguments.length){if(n.is(t,"object")){for(var o in t)t.hasOwnProperty(o)&&this.data(o,t[o]);return this}return e("snap.data.get."+this.id,this,i[t],t),i[t]}return i[t]=r,e("snap.data.set."+this.id,this,r,t),this},c.removeData=function(t){return null==t?x[this.id]={}:x[this.id]&&delete x[this.id][t],this},c.outerSVG=c.toString=l(1),c.innerSVG=l(),c.toDataURL=function(){if(t&&t.btoa){var e=this.getBBox(),r=n.format('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="{width}" height="{height}" viewBox="{x} {y} {width} {height}">{contents}</svg>',{x:+e.x.toFixed(3),y:+e.y.toFixed(3),width:+e.width.toFixed(3),height:+e.height.toFixed(3),contents:this.outerSVG()});return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(r)))}},a.prototype.select=c.select,a.prototype.selectAll=c.selectAll}),r.plugin(function(t,r,i,o,a){function s(t,e,n){return function(r){var i=r.slice(t,e);return 1==i.length&&(i=i[0]),n?n(i):i}}var u=r.prototype,l=t.is,c=String,f="hasOwnProperty",d=function(t,e,r,i){"function"!=typeof r||r.length||(i=r,r=n.linear),this.attr=t,this.dur=e,r&&(this.easing=r),i&&(this.callback=i)};t._.Animation=d,t.animation=function(t,e,n,r){return new d(t,e,n,r)},u.inAnim=function(){var t=this,e=[];for(var n in t.anims)t.anims[f](n)&&function(t){e.push({anim:new d(t._attrs,t.dur,t.easing,t._callback),mina:t,curStatus:t.status(),status:function(e){return t.status(e)},stop:function(){t.stop()}})}(t.anims[n]);return e},t.animate=function(t,r,i,o,a,s){"function"!=typeof a||a.length||(s=a,a=n.linear);var u=n.time(),l=n(t,r,u,u+o,n.time,i,a);return s&&e.once("mina.finish."+l.id,s),l},u.stop=function(){for(var t=this.inAnim(),e=0,n=t.length;e<n;e++)t[e].stop();return this},u.animate=function(t,r,i,o){"function"!=typeof i||i.length||(o=i,i=n.linear),t instanceof d&&(o=t.callback,i=t.easing,r=t.dur,t=t.attr);var a,u,p,h,g=[],v=[],m={},y=this;for(var x in t)if(t[f](x)){y.equal?(h=y.equal(x,c(t[x])),a=h.from,u=h.to,p=h.f):(a=+y.attr(x),u=+t[x]);var b=l(a,"array")?a.length:1;m[x]=s(g.length,g.length+b,p),g=g.concat(a),v=v.concat(u)}var w=n.time(),C=n(g,v,w,w+r,n.time,function(t){var e={};for(var n in m)m[f](n)&&(e[n]=m[n](t));y.attr(e)},i);return y.anims[C.id]=C,C._attrs=t,C._callback=o,e("snap.animcreated."+y.id,C),e.once("mina.finish."+C.id,function(){e.off("mina.*."+C.id),delete y.anims[C.id],o&&o.call(y)}),e.once("mina.stop."+C.id,function(){e.off("mina.*."+C.id),delete y.anims[C.id]}),y}}),r.plugin(function(t,e,n,r,i){function o(t,e,n,r,i,o){if(null==e&&"[object SVGMatrix]"==a.call(t))return this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.e=t.e,void(this.f=t.f);null!=t?(this.a=+t,this.b=+e,this.c=+n,this.d=+r,this.e=+i,this.f=+o):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0)}var a=Object.prototype.toString,s=String,u=Math;!function(e){function n(t){return t[0]*t[0]+t[1]*t[1]}function r(t){var e=u.sqrt(n(t));t[0]&&(t[0]/=e),t[1]&&(t[1]/=e)}e.add=function(t,e,n,r,i,a){if(t&&t instanceof o)return this.add(t.a,t.b,t.c,t.d,t.e,t.f);var s=t*this.a+e*this.c,u=t*this.b+e*this.d;return this.e+=i*this.a+a*this.c,this.f+=i*this.b+a*this.d,this.c=n*this.a+r*this.c,this.d=n*this.b+r*this.d,this.a=s,this.b=u,this},o.prototype.multLeft=function(t,e,n,r,i,a){if(t&&t instanceof o)return this.multLeft(t.a,t.b,t.c,t.d,t.e,t.f);var s=t*this.a+n*this.b,u=t*this.c+n*this.d,l=t*this.e+n*this.f+i;return this.b=e*this.a+r*this.b,this.d=e*this.c+r*this.d,this.f=e*this.e+r*this.f+a,this.a=s,this.c=u,this.e=l,this},e.invert=function(){var t=this,e=t.a*t.d-t.b*t.c;return new o(t.d/e,-t.b/e,-t.c/e,t.a/e,(t.c*t.f-t.d*t.e)/e,(t.b*t.e-t.a*t.f)/e)},e.clone=function(){return new o(this.a,this.b,this.c,this.d,this.e,this.f)},e.translate=function(t,e){return this.e+=t*this.a+e*this.c,this.f+=t*this.b+e*this.d,this},e.scale=function(t,e,n,r){return null==e&&(e=t),(n||r)&&this.translate(n,r),this.a*=t,this.b*=t,this.c*=e,this.d*=e,(n||r)&&this.translate(-n,-r),this},e.rotate=function(e,n,r){e=t.rad(e),n=n||0,r=r||0;var i=+u.cos(e).toFixed(9),o=+u.sin(e).toFixed(9);return this.add(i,o,-o,i,n,r),this.add(1,0,0,1,-n,-r)},e.skewX=function(t){return this.skew(t,0)},e.skewY=function(t){return this.skew(0,t)},e.skew=function(e,n){e=e||0,n=n||0,e=t.rad(e),n=t.rad(n);var r=u.tan(e).toFixed(9),i=u.tan(n).toFixed(9);return this.add(1,i,r,1,0,0)},e.x=function(t,e){return t*this.a+e*this.c+this.e},e.y=function(t,e){return t*this.b+e*this.d+this.f},e.get=function(t){return+this[s.fromCharCode(97+t)].toFixed(4)},e.toString=function(){return"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")"},e.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},e.determinant=function(){return this.a*this.d-this.b*this.c},e.split=function(){var e={};e.dx=this.e,e.dy=this.f;var i=[[this.a,this.b],[this.c,this.d]];e.scalex=u.sqrt(n(i[0])),r(i[0]),e.shear=i[0][0]*i[1][0]+i[0][1]*i[1][1],i[1]=[i[1][0]-i[0][0]*e.shear,i[1][1]-i[0][1]*e.shear],e.scaley=u.sqrt(n(i[1])),r(i[1]),e.shear/=e.scaley,this.determinant()<0&&(e.scalex=-e.scalex);var o=i[0][1],a=i[1][1];return a<0?(e.rotate=t.deg(u.acos(a)),o<0&&(e.rotate=360-e.rotate)):e.rotate=t.deg(u.asin(o)),e.isSimple=!(+e.shear.toFixed(9)||e.scalex.toFixed(9)!=e.scaley.toFixed(9)&&e.rotate),e.isSuperSimple=!+e.shear.toFixed(9)&&e.scalex.toFixed(9)==e.scaley.toFixed(9)&&!e.rotate,e.noRotation=!+e.shear.toFixed(9)&&!e.rotate,e},e.toTransformString=function(t){var e=t||this.split();return+e.shear.toFixed(9)?"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]:(e.scalex=+e.scalex.toFixed(4),e.scaley=+e.scaley.toFixed(4),e.rotate=+e.rotate.toFixed(4),(e.dx||e.dy?"t"+[+e.dx.toFixed(4),+e.dy.toFixed(4)]:"")+(e.rotate?"r"+[+e.rotate.toFixed(4),0,0]:"")+(1!=e.scalex||1!=e.scaley?"s"+[e.scalex,e.scaley,0,0]:""))}}(o.prototype),t.Matrix=o,t.matrix=function(t,e,n,r,i,a){return new o(t,e,n,r,i,a)}}),r.plugin(function(t,n,r,i,o){function a(r){return function(i){if(e.stop(),i instanceof o&&1==i.node.childNodes.length&&("radialGradient"==i.node.firstChild.tagName||"linearGradient"==i.node.firstChild.tagName||"pattern"==i.node.firstChild.tagName)&&(i=i.node.firstChild,p(this).appendChild(i),i=f(i)),i instanceof n)if("radialGradient"==i.type||"linearGradient"==i.type||"pattern"==i.type){i.node.id||g(i.node,{id:i.id});var a=v(i.node.id)}else a=i.attr(r);else if(a=t.color(i),a.error){var s=t(p(this).ownerSVGElement).gradient(i);s?(s.node.id||g(s.node,{id:s.id}),a=v(s.node.id)):a=i}else a=m(a);var u={};u[r]=a,g(this.node,u),this.node.style[r]=x}}function s(t){e.stop(),t==+t&&(t+="px"),this.node.style.fontSize=t}function u(t){for(var e=[],n=t.childNodes,r=0,i=n.length;r<i;r++){var o=n[r];3==o.nodeType&&e.push(o.nodeValue),"tspan"==o.tagName&&(1==o.childNodes.length&&3==o.firstChild.nodeType?e.push(o.firstChild.nodeValue):e.push(u(o)))}return e}function l(){return e.stop(),this.node.style.fontSize}var c=t._.make,f=t._.wrap,d=t.is,p=t._.getSomeDefs,h=/^url\((['"]?)([^)]+)\1\)$/,g=t._.$,v=t.url,m=String,y=t._.separator,x="";t.deurl=function(t){var e=String(t).match(h);return e?e[2]:t},e.on("snap.util.attr.mask",function(t){if(t instanceof n||t instanceof o){if(e.stop(),t instanceof o&&1==t.node.childNodes.length&&(t=t.node.firstChild,p(this).appendChild(t),t=f(t)),"mask"==t.type)var r=t;else r=c("mask",p(this)),r.node.appendChild(t.node);!r.node.id&&g(r.node,{id:r.id}),g(this.node,{mask:v(r.id)})}}),function(t){e.on("snap.util.attr.clip",t),e.on("snap.util.attr.clip-path",t),e.on("snap.util.attr.clipPath",t)}(function(t){if(t instanceof n||t instanceof o){e.stop();for(var r,i=t.node;i;){if("clipPath"===i.nodeName){r=new n(i);break}if("svg"===i.nodeName){r=void 0;break}i=i.parentNode}r||(r=c("clipPath",p(this)),r.node.appendChild(t.node),!r.node.id&&g(r.node,{id:r.id})),g(this.node,{"clip-path":v(r.node.id||r.id)})}}),e.on("snap.util.attr.fill",a("fill")),e.on("snap.util.attr.stroke",a("stroke"));e.on("snap.util.grad.parse",function(t){function e(t,e){for(var n=(e-s)/(t-u),r=u;r<t;r++)o[r].offset=+(+s+n*(r-u)).toFixed(2);u=t,s=e}t=m(t);var n=t.match(/^([lr])(?:\(([^)]*)\))?(.*)$/i);if(!n)return null;var r=n[1],i=n[2],o=n[3];i=i.split(/\s*,\s*/).map(function(t){return+t==t?+t:t}),1==i.length&&0==i[0]&&(i=[]),o=o.split("-"),o=o.map(function(t){t=t.split(":");var e={color:t[0]};return t[1]&&(e.offset=parseFloat(t[1])),e});var a=o.length,s=0,u=0;a--;for(var l=0;l<a;l++)"offset"in o[l]&&e(l,o[l].offset);return o[a].offset=o[a].offset||100,e(a,o[a].offset),{type:r,params:i,stops:o}}),e.on("snap.util.attr.d",function(n){e.stop(),d(n,"array")&&d(n[0],"array")&&(n=t.path.toString.call(n)),n=m(n),n.match(/[ruo]/i)&&(n=t.path.toAbsolute(n)),g(this.node,{d:n})})(-1),e.on("snap.util.attr.#text",function(t){e.stop(),t=m(t);for(var n=i.doc.createTextNode(t);this.node.firstChild;)this.node.removeChild(this.node.firstChild);this.node.appendChild(n)})(-1),e.on("snap.util.attr.path",function(t){e.stop(),this.attr({d:t})})(-1),e.on("snap.util.attr.class",function(t){e.stop(),this.node.className.baseVal=t})(-1),e.on("snap.util.attr.viewBox",function(t){var n;n=d(t,"object")&&"x"in t?[t.x,t.y,t.width,t.height].join(" "):d(t,"array")?t.join(" "):t,g(this.node,{viewBox:n}),e.stop()})(-1),e.on("snap.util.attr.transform",function(t){this.transform(t),e.stop()})(-1),e.on("snap.util.attr.r",function(t){"rect"==this.type&&(e.stop(),g(this.node,{rx:t,ry:t}))})(-1),e.on("snap.util.attr.textpath",function(t){if(e.stop(),"text"==this.type){var r,i,o;if(!t&&this.textPath){for(i=this.textPath;i.node.firstChild;)this.node.appendChild(i.node.firstChild);return i.remove(),void delete this.textPath}if(d(t,"string")){var a=p(this),s=f(a.parentNode).path(t);a.appendChild(s.node),r=s.id,s.attr({id:r})}else(t=f(t))instanceof n&&((r=t.attr("id"))||(r=t.id,t.attr({id:r})));if(r)if(i=this.textPath,o=this.node,i)i.attr({"xlink:href":"#"+r});else{for(i=g("textPath",{"xlink:href":"#"+r});o.firstChild;)i.appendChild(o.firstChild);o.appendChild(i),this.textPath=f(i)}}})(-1),e.on("snap.util.attr.text",function(t){if("text"==this.type){
for(var n=this.node,r=function(t){var e=g("tspan");if(d(t,"array"))for(var n=0;n<t.length;n++)e.appendChild(r(t[n]));else e.appendChild(i.doc.createTextNode(t));return e.normalize&&e.normalize(),e};n.firstChild;)n.removeChild(n.firstChild);for(var o=r(t);o.firstChild;)n.appendChild(o.firstChild)}e.stop()})(-1),e.on("snap.util.attr.fontSize",s)(-1),e.on("snap.util.attr.font-size",s)(-1),e.on("snap.util.getattr.transform",function(){return e.stop(),this.transform()})(-1),e.on("snap.util.getattr.textpath",function(){return e.stop(),this.textPath})(-1),function(){function n(n){return function(){e.stop();var r=i.doc.defaultView.getComputedStyle(this.node,null).getPropertyValue("marker-"+n);return"none"==r?r:t(i.doc.getElementById(r.match(h)[1]))}}function r(t){return function(n){e.stop();var r="marker"+t.charAt(0).toUpperCase()+t.substring(1);if(""==n||!n)return void(this.node.style[r]="none");if("marker"==n.type){var i=n.node.id;return i||g(n.node,{id:n.id}),void(this.node.style[r]=v(i))}}}e.on("snap.util.getattr.marker-end",n("end"))(-1),e.on("snap.util.getattr.markerEnd",n("end"))(-1),e.on("snap.util.getattr.marker-start",n("start"))(-1),e.on("snap.util.getattr.markerStart",n("start"))(-1),e.on("snap.util.getattr.marker-mid",n("mid"))(-1),e.on("snap.util.getattr.markerMid",n("mid"))(-1),e.on("snap.util.attr.marker-end",r("end"))(-1),e.on("snap.util.attr.markerEnd",r("end"))(-1),e.on("snap.util.attr.marker-start",r("start"))(-1),e.on("snap.util.attr.markerStart",r("start"))(-1),e.on("snap.util.attr.marker-mid",r("mid"))(-1),e.on("snap.util.attr.markerMid",r("mid"))(-1)}(),e.on("snap.util.getattr.r",function(){if("rect"==this.type&&g(this.node,"rx")==g(this.node,"ry"))return e.stop(),g(this.node,"rx")})(-1),e.on("snap.util.getattr.text",function(){if("text"==this.type||"tspan"==this.type){e.stop();var t=u(this.node);return 1==t.length?t[0]:t}})(-1),e.on("snap.util.getattr.#text",function(){return this.node.textContent})(-1),e.on("snap.util.getattr.fill",function(n){if(!n){e.stop();var r=e("snap.util.getattr.fill",this,!0).firstDefined();return t(t.deurl(r))||r}})(-1),e.on("snap.util.getattr.stroke",function(n){if(!n){e.stop();var r=e("snap.util.getattr.stroke",this,!0).firstDefined();return t(t.deurl(r))||r}})(-1),e.on("snap.util.getattr.viewBox",function(){e.stop();var n=g(this.node,"viewBox");return n?(n=n.split(y),t._.box(+n[0],+n[1],+n[2],+n[3])):void 0})(-1),e.on("snap.util.getattr.points",function(){var t=g(this.node,"points");return e.stop(),t?t.split(y):void 0})(-1),e.on("snap.util.getattr.path",function(){var t=g(this.node,"d");return e.stop(),t})(-1),e.on("snap.util.getattr.class",function(){return this.node.className.baseVal})(-1),e.on("snap.util.getattr.fontSize",l)(-1),e.on("snap.util.getattr.font-size",l)(-1)}),r.plugin(function(t,e,n,r,i){var o=String,a=e.prototype;a.addClass=function(t){var e,n,r,i=o(t||"").match(/\S+/g)||[],a=this.node,s=a.className.baseVal,u=s.match(/\S+/g)||[];if(i.length){for(e=0;n=i[e++];)~u.indexOf(n)||u.push(n);r=u.join(" "),s!=r&&(a.className.baseVal=r)}return this},a.removeClass=function(t){var e,n,r,i,a=o(t||"").match(/\S+/g)||[],s=this.node,u=s.className.baseVal,l=u.match(/\S+/g)||[];if(l.length){for(e=0;r=a[e++];)~(n=l.indexOf(r))&&l.splice(n,1);i=l.join(" "),u!=i&&(s.className.baseVal=i)}return this},a.hasClass=function(t){return!!~(this.node.className.baseVal.match(/\S+/g)||[]).indexOf(t)},a.toggleClass=function(t,e){if(null!=e)return e?this.addClass(t):this.removeClass(t);var n,r,i,o,a=(t||"").match(/\S+/g)||[],s=this.node,u=s.className.baseVal,l=u.match(/\S+/g)||[];for(n=0;i=a[n++];)r=l.indexOf(i),~r?l.splice(r,1):l.push(i);return o=l.join(" "),u!=o&&(s.className.baseVal=o),this}}),r.plugin(function(t,n,r,i,o){function a(t){return t}function s(t){return function(e){return+e.toFixed(3)+t}}var u={"+":function(t,e){return t+e},"-":function(t,e){return t-e},"/":function(t,e){return t/e},"*":function(t,e){return t*e}},l=String,c=/^\s*([+\-\/*])\s*=\s*([\d.eE+\-]+)\s*([^\d\s]+)?\s*$/;e.on("snap.util.attr",function(t){var n=l(t).match(c);if(n){var r=e.nt(),i=r.substring(r.lastIndexOf(".")+1),o=this.attr(i),a={};e.stop();var s=n[3]||"",f=o.match(/[a-z]+$/i),d=u[n[1]];if(f&&f==s?t=d(parseFloat(o),+n[2]):(o=this.asPX(i),t=d(this.asPX(i),this.asPX(i,n[2]+s))),isNaN(o)||isNaN(t))return;a[i]=t,this.attr(a)}})(-10),e.on("snap.util.equal",function(t,n){var r=l(this.attr(t)||""),i=l(n).match(c);if(i){e.stop();var o=i[3]||"",f=r.match(/[a-z]+$/i),d=u[i[1]];return f&&f==o?{from:parseFloat(r),to:d(parseFloat(r),+i[2]),f:s(f)}:(r=this.asPX(t),{from:r,to:d(r,this.asPX(t,i[2]+o)),f:a})}})(-10)}),r.plugin(function(n,r,i,o,a){var s=i.prototype,u=n.is;s.rect=function(t,e,n,r,i,o){var a;return null==o&&(o=i),u(t,"object")&&"[object Object]"==t?a=t:null!=t&&(a={x:t,y:e,width:n,height:r},null!=i&&(a.rx=i,a.ry=o)),this.el("rect",a)},s.circle=function(t,e,n){var r;return u(t,"object")&&"[object Object]"==t?r=t:null!=t&&(r={cx:t,cy:e,r:n}),this.el("circle",r)};var l=function(){function t(){this.parentNode.removeChild(this)}return function(e,n){var r=o.doc.createElement("img"),i=o.doc.body;r.style.cssText="position:absolute;left:-9999em;top:-9999em",r.onload=function(){n.call(r),r.onload=r.onerror=null,i.removeChild(r)},r.onerror=t,i.appendChild(r),r.src=e}}();s.image=function(t,e,r,i,o){var a=this.el("image");if(u(t,"object")&&"src"in t)a.attr(t);else if(null!=t){var s={"xlink:href":t,preserveAspectRatio:"none"};null!=e&&null!=r&&(s.x=e,s.y=r),null!=i&&null!=o?(s.width=i,s.height=o):l(t,function(){n._.$(a.node,{width:this.offsetWidth,height:this.offsetHeight})}),n._.$(a.node,s)}return a},s.ellipse=function(t,e,n,r){var i;return u(t,"object")&&"[object Object]"==t?i=t:null!=t&&(i={cx:t,cy:e,rx:n,ry:r}),this.el("ellipse",i)},s.path=function(t){var e;return u(t,"object")&&!u(t,"array")?e=t:t&&(e={d:t}),this.el("path",e)},s.group=s.g=function(t){var e=this.el("g");return 1==arguments.length&&t&&!t.type?e.attr(t):arguments.length&&e.add(Array.prototype.slice.call(arguments,0)),e},s.svg=function(t,e,n,r,i,o,a,s){var l={};return u(t,"object")&&null==e?l=t:(null!=t&&(l.x=t),null!=e&&(l.y=e),null!=n&&(l.width=n),null!=r&&(l.height=r),null!=i&&null!=o&&null!=a&&null!=s&&(l.viewBox=[i,o,a,s])),this.el("svg",l)},s.mask=function(t){var e=this.el("mask");return 1==arguments.length&&t&&!t.type?e.attr(t):arguments.length&&e.add(Array.prototype.slice.call(arguments,0)),e},s.ptrn=function(t,e,n,r,i,o,a,s){if(u(t,"object"))var l=t;else l={patternUnits:"userSpaceOnUse"},t&&(l.x=t),e&&(l.y=e),null!=n&&(l.width=n),null!=r&&(l.height=r),l.viewBox=null!=i&&null!=o&&null!=a&&null!=s?[i,o,a,s]:[t||0,e||0,n||0,r||0];return this.el("pattern",l)},s.use=function(t){return null!=t?(t instanceof r&&(t.attr("id")||t.attr({id:n._.id(t)}),t=t.attr("id")),"#"==String(t).charAt()&&(t=t.substring(1)),this.el("use",{"xlink:href":"#"+t})):r.prototype.use.call(this)},s.symbol=function(t,e,n,r){var i={};return null!=t&&null!=e&&null!=n&&null!=r&&(i.viewBox=[t,e,n,r]),this.el("symbol",i)},s.text=function(t,e,n){var r={};return u(t,"object")?r=t:null!=t&&(r={x:t,y:e,text:n||""}),this.el("text",r)},s.line=function(t,e,n,r){var i={};return u(t,"object")?i=t:null!=t&&(i={x1:t,x2:n,y1:e,y2:r}),this.el("line",i)},s.polyline=function(t){arguments.length>1&&(t=Array.prototype.slice.call(arguments,0));var e={};return u(t,"object")&&!u(t,"array")?e=t:null!=t&&(e={points:t}),this.el("polyline",e)},s.polygon=function(t){arguments.length>1&&(t=Array.prototype.slice.call(arguments,0));var e={};return u(t,"object")&&!u(t,"array")?e=t:null!=t&&(e={points:t}),this.el("polygon",e)},function(){function r(){return this.selectAll("stop")}function i(t,e){var r=f("stop"),i={offset:+e+"%"};t=n.color(t),i["stop-color"]=t.hex,t.opacity<1&&(i["stop-opacity"]=t.opacity),f(r,i);for(var o,a=this.stops(),s=0;s<a.length;s++){if(parseFloat(a[s].attr("offset"))>e){this.node.insertBefore(r,a[s].node),o=!0;break}}return o||this.node.appendChild(r),this}function o(){if("linearGradient"==this.type){var t=f(this.node,"x1")||0,e=f(this.node,"x2")||1,r=f(this.node,"y1")||0,i=f(this.node,"y2")||0;return n._.box(t,r,math.abs(e-t),math.abs(i-r))}var o=this.node.cx||.5,a=this.node.cy||.5,s=this.node.r||0;return n._.box(o-s,a-s,2*s,2*s)}function a(t){var r=t,i=this.stops();if("string"==typeof t&&(r=e("snap.util.grad.parse",null,"l(0,0,0,1)"+t).firstDefined().stops),n.is(r,"array")){for(var o=0;o<i.length;o++)if(r[o]){var a=n.color(r[o].color),s={offset:r[o].offset+"%"};s["stop-color"]=a.hex,a.opacity<1&&(s["stop-opacity"]=a.opacity),i[o].attr(s)}else i[o].remove();for(o=i.length;o<r.length;o++)this.addStop(r[o].color,r[o].offset);return this}}function u(t,n){var r,i=e("snap.util.grad.parse",null,n).firstDefined();if(!i)return null;i.params.unshift(t),r="l"==i.type.toLowerCase()?l.apply(0,i.params):c.apply(0,i.params),i.type!=i.type.toLowerCase()&&f(r.node,{gradientUnits:"userSpaceOnUse"});for(var o=i.stops,a=o.length,s=0;s<a;s++){var u=o[s];r.addStop(u.color,u.offset)}return r}function l(t,e,s,u,l){var c=n._.make("linearGradient",t);return c.stops=r,c.addStop=i,c.getBBox=o,c.setStops=a,null!=e&&f(c.node,{x1:e,y1:s,x2:u,y2:l}),c}function c(t,e,a,s,u,l){var c=n._.make("radialGradient",t);return c.stops=r,c.addStop=i,c.getBBox=o,null!=e&&f(c.node,{cx:e,cy:a,r:s}),null!=u&&null!=l&&f(c.node,{fx:u,fy:l}),c}var f=n._.$;s.gradient=function(t){return u(this.defs,t)},s.gradientLinear=function(t,e,n,r){return l(this.defs,t,e,n,r)},s.gradientRadial=function(t,e,n,r,i){return c(this.defs,t,e,n,r,i)},s.toString=function(){var t,e=this.node.ownerDocument,r=e.createDocumentFragment(),i=e.createElement("div"),o=this.node.cloneNode(!0);return r.appendChild(i),i.appendChild(o),n._.$(o,{xmlns:"http://www.w3.org/2000/svg"}),t=i.innerHTML,r.removeChild(r.firstChild),t},s.toDataURL=function(){if(t&&t.btoa)return"data:image/svg+xml;base64,"+btoa(unescape(encodeURIComponent(this)))},s.clear=function(){for(var t,e=this.node.firstChild;e;)t=e.nextSibling,"defs"!=e.tagName?e.parentNode.removeChild(e):s.clear.call({node:e}),e=t}}()}),r.plugin(function(t,e,n,r){function i(t){var e=i.ps=i.ps||{};return e[t]?e[t].sleep=100:e[t]={sleep:100},setTimeout(function(){for(var n in e)e[_](n)&&n!=t&&!--e[n].sleep&&delete e[n]}),e[t]}function o(t,e,n,r){return null==t&&(t=e=n=r=0),null==e&&(e=t.y,n=t.width,r=t.height,t=t.x),{x:t,y:e,width:n,w:n,height:r,h:r,x2:t+n,y2:e+r,cx:t+n/2,cy:e+r/2,r1:I.min(n,r)/2,r2:I.max(n,r)/2,r0:I.sqrt(n*n+r*r)/2,path:E(t,e,n,r),vb:[t,e,n,r].join(" ")}}function a(){return this.join(",").replace(H,"$1")}function s(t){var e=O(t);return e.toString=a,e}function u(t,e,n,r,i,o,a,s,u){return null==u?g(t,e,n,r,i,o,a,s):c(t,e,n,r,i,o,a,s,v(t,e,n,r,i,o,a,s,u))}function l(n,r){function i(t){return+(+t).toFixed(3)}return t._.cacher(function(t,o,a){t instanceof e&&(t=t.attr("d")),t=j(t);for(var s,l,f,d,p,h="",g={},v=0,m=0,y=t.length;m<y;m++){if(f=t[m],"M"==f[0])s=+f[1],l=+f[2];else{if(d=u(s,l,f[1],f[2],f[3],f[4],f[5],f[6]),v+d>o){if(r&&!g.start){if(p=u(s,l,f[1],f[2],f[3],f[4],f[5],f[6],o-v),h+=["C"+i(p.start.x),i(p.start.y),i(p.m.x),i(p.m.y),i(p.x),i(p.y)],a)return h;g.start=h,h=["M"+i(p.x),i(p.y)+"C"+i(p.n.x),i(p.n.y),i(p.end.x),i(p.end.y),i(f[5]),i(f[6])].join(),v+=d,s=+f[5],l=+f[6];continue}if(!n&&!r)return p=u(s,l,f[1],f[2],f[3],f[4],f[5],f[6],o-v)}v+=d,s=+f[5],l=+f[6]}h+=f.shift()+f}return g.end=h,p=n?v:r?g:c(s,l,f[0],f[1],f[2],f[3],f[4],f[5],1)},null,t._.clone)}function c(t,e,n,r,i,o,a,s,u){var l=1-u,c=V(l,3),f=V(l,2),d=u*u,p=d*u,h=c*t+3*f*u*n+3*l*u*u*i+p*a,g=c*e+3*f*u*r+3*l*u*u*o+p*s,v=t+2*u*(n-t)+d*(i-2*n+t),m=e+2*u*(r-e)+d*(o-2*r+e),y=n+2*u*(i-n)+d*(a-2*i+n),x=r+2*u*(o-r)+d*(s-2*o+r);return{x:h,y:g,m:{x:v,y:m},n:{x:y,y:x},start:{x:l*t+u*n,y:l*e+u*r},end:{x:l*i+u*a,y:l*o+u*s},alpha:90-180*I.atan2(v-y,m-x)/$}}function f(e,n,r,i,a,s,u,l){t.is(e,"array")||(e=[e,n,r,i,a,s,u,l]);var c=B.apply(null,e);return o(c.min.x,c.min.y,c.max.x-c.min.x,c.max.y-c.min.y)}function d(t,e,n){return e>=t.x&&e<=t.x+t.width&&n>=t.y&&n<=t.y+t.height}function p(t,e){return t=o(t),e=o(e),d(e,t.x,t.y)||d(e,t.x2,t.y)||d(e,t.x,t.y2)||d(e,t.x2,t.y2)||d(t,e.x,e.y)||d(t,e.x2,e.y)||d(t,e.x,e.y2)||d(t,e.x2,e.y2)||(t.x<e.x2&&t.x>e.x||e.x<t.x2&&e.x>t.x)&&(t.y<e.y2&&t.y>e.y||e.y<t.y2&&e.y>t.y)}function h(t,e,n,r,i){return t*(t*(-3*e+9*n-9*r+3*i)+6*e-12*n+6*r)-3*e+3*n}function g(t,e,n,r,i,o,a,s,u){null==u&&(u=1),u=u>1?1:u<0?0:u;for(var l=u/2,c=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],f=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],d=0,p=0;p<12;p++){var g=l*c[p]+l,v=h(g,t,n,i,a),m=h(g,e,r,o,s),y=v*v+m*m;d+=f[p]*I.sqrt(y)}return l*d}function v(t,e,n,r,i,o,a,s,u){if(!(u<0||g(t,e,n,r,i,o,a,s)<u)){var l,c=.5,f=1-c;for(l=g(t,e,n,r,i,o,a,s,f);G(l-u)>.01;)c/=2,f+=(l<u?1:-1)*c,l=g(t,e,n,r,i,o,a,s,f);return f}}function m(t,e,n,r,i,o,a,s){if(!(W(t,n)<z(i,a)||z(t,n)>W(i,a)||W(e,r)<z(o,s)||z(e,r)>W(o,s))){var u=(t*r-e*n)*(i-a)-(t-n)*(i*s-o*a),l=(t*r-e*n)*(o-s)-(e-r)*(i*s-o*a),c=(t-n)*(o-s)-(e-r)*(i-a);if(c){var f=u/c,d=l/c,p=+f.toFixed(2),h=+d.toFixed(2);if(!(p<+z(t,n).toFixed(2)||p>+W(t,n).toFixed(2)||p<+z(i,a).toFixed(2)||p>+W(i,a).toFixed(2)||h<+z(e,r).toFixed(2)||h>+W(e,r).toFixed(2)||h<+z(o,s).toFixed(2)||h>+W(o,s).toFixed(2)))return{x:f,y:d}}}}function y(t,e,n){if(!p(f(t),f(e)))return n?0:[];for(var r=g.apply(0,t),i=g.apply(0,e),o=~~(r/8),a=~~(i/8),s=[],u=[],l={},d=n?0:[],h=0;h<o+1;h++){var v=c.apply(0,t.concat(h/o));s.push({x:v.x,y:v.y,t:h/o})}for(h=0;h<a+1;h++)v=c.apply(0,e.concat(h/a)),u.push({x:v.x,y:v.y,t:h/a});for(h=0;h<o;h++)for(var y=0;y<a;y++){var x=s[h],b=s[h+1],w=u[y],C=u[y+1],F=G(b.x-x.x)<.001?"y":"x",E=G(C.x-w.x)<.001?"y":"x",T=m(x.x,x.y,b.x,b.y,w.x,w.y,C.x,C.y);if(T){if(l[T.x.toFixed(4)]==T.y.toFixed(4))continue;l[T.x.toFixed(4)]=T.y.toFixed(4);var S=x.t+G((T[F]-x[F])/(b[F]-x[F]))*(b.t-x.t),A=w.t+G((T[E]-w[E])/(C[E]-w[E]))*(C.t-w.t);S>=0&&S<=1&&A>=0&&A<=1&&(n?d++:d.push({x:T.x,y:T.y,t1:S,t2:A}))}}return d}function x(t,e){return w(t,e)}function b(t,e){return w(t,e,1)}function w(t,e,n){t=j(t),e=j(e);for(var r,i,o,a,s,u,l,c,f,d,p=n?0:[],h=0,g=t.length;h<g;h++){var v=t[h];if("M"==v[0])r=s=v[1],i=u=v[2];else{"C"==v[0]?(f=[r,i].concat(v.slice(1)),r=f[6],i=f[7]):(f=[r,i,r,i,s,u,s,u],r=s,i=u);for(var m=0,x=e.length;m<x;m++){var b=e[m];if("M"==b[0])o=l=b[1],a=c=b[2];else{"C"==b[0]?(d=[o,a].concat(b.slice(1)),o=d[6],a=d[7]):(d=[o,a,o,a,l,c,l,c],o=l,a=c);var w=y(f,d,n);if(n)p+=w;else{for(var C=0,F=w.length;C<F;C++)w[C].segment1=h,w[C].segment2=m,w[C].bez1=f,w[C].bez2=d;p=p.concat(w)}}}}}return p}function C(t,e,n){var r=F(t);return d(r,e,n)&&w(t,[["M",e,n],["H",r.x2+10]],1)%2==1}function F(t){var e=i(t);if(e.bbox)return O(e.bbox);if(!t)return o();t=j(t);for(var n,r=0,a=0,s=[],u=[],l=0,c=t.length;l<c;l++)if(n=t[l],"M"==n[0])r=n[1],a=n[2],s.push(r),u.push(a);else{var f=B(r,a,n[1],n[2],n[3],n[4],n[5],n[6]);s=s.concat(f.min.x,f.max.x),u=u.concat(f.min.y,f.max.y),r=n[5],a=n[6]}var d=z.apply(0,s),p=z.apply(0,u),h=W.apply(0,s),g=W.apply(0,u),v=o(d,p,h-d,g-p);return e.bbox=O(v),v}function E(t,e,n,r,i){if(i)return[["M",+t+ +i,e],["l",n-2*i,0],["a",i,i,0,0,1,i,i],["l",0,r-2*i],["a",i,i,0,0,1,-i,i],["l",2*i-n,0],["a",i,i,0,0,1,-i,-i],["l",0,2*i-r],["a",i,i,0,0,1,i,-i],["z"]];var o=[["M",t,e],["l",n,0],["l",0,r],["l",-n,0],["z"]];return o.toString=a,o}function T(t,e,n,r,i){if(null==i&&null==r&&(r=n),t=+t,e=+e,n=+n,r=+r,null!=i)var o=Math.PI/180,s=t+n*Math.cos(-r*o),u=t+n*Math.cos(-i*o),l=e+n*Math.sin(-r*o),c=e+n*Math.sin(-i*o),f=[["M",s,l],["A",n,n,0,+(i-r>180),0,u,c]];else f=[["M",t,e],["m",0,-r],["a",n,r,0,1,1,0,2*r],["a",n,r,0,1,1,0,-2*r],["z"]];return f.toString=a,f}function S(e){var n=i(e),r=String.prototype.toLowerCase;if(n.rel)return s(n.rel);t.is(e,"array")&&t.is(e&&e[0],"array")||(e=t.parsePathString(e));var o=[],u=0,l=0,c=0,f=0,d=0;"M"==e[0][0]&&(u=e[0][1],l=e[0][2],c=u,f=l,d++,o.push(["M",u,l]));for(var p=d,h=e.length;p<h;p++){var g=o[p]=[],v=e[p];if(v[0]!=r.call(v[0]))switch(g[0]=r.call(v[0]),g[0]){case"a":g[1]=v[1],g[2]=v[2],g[3]=v[3],g[4]=v[4],g[5]=v[5],g[6]=+(v[6]-u).toFixed(3),g[7]=+(v[7]-l).toFixed(3);break;case"v":g[1]=+(v[1]-l).toFixed(3);break;case"m":c=v[1],f=v[2];default:for(var m=1,y=v.length;m<y;m++)g[m]=+(v[m]-(m%2?u:l)).toFixed(3)}else{g=o[p]=[],"m"==v[0]&&(c=v[1]+u,f=v[2]+l);for(var x=0,b=v.length;x<b;x++)o[p][x]=v[x]}var w=o[p].length;switch(o[p][0]){case"z":u=c,l=f;break;case"h":u+=+o[p][w-1];break;case"v":l+=+o[p][w-1];break;default:u+=+o[p][w-2],l+=+o[p][w-1]}}return o.toString=a,n.rel=s(o),o}function A(e){var n=i(e);if(n.abs)return s(n.abs);if(P(e,"array")&&P(e&&e[0],"array")||(e=t.parsePathString(e)),!e||!e.length)return[["M",0,0]];var r,o=[],u=0,l=0,c=0,f=0,d=0;"M"==e[0][0]&&(u=+e[0][1],l=+e[0][2],c=u,f=l,d++,o[0]=["M",u,l]);for(var p,h,g=3==e.length&&"M"==e[0][0]&&"R"==e[1][0].toUpperCase()&&"Z"==e[2][0].toUpperCase(),v=d,m=e.length;v<m;v++){if(o.push(p=[]),h=e[v],(r=h[0])!=r.toUpperCase())switch(p[0]=r.toUpperCase(),p[0]){case"A":p[1]=h[1],p[2]=h[2],p[3]=h[3],p[4]=h[4],p[5]=h[5],p[6]=+h[6]+u,p[7]=+h[7]+l;break;case"V":p[1]=+h[1]+l;break;case"H":p[1]=+h[1]+u;break;case"R":for(var y=[u,l].concat(h.slice(1)),x=2,b=y.length;x<b;x++)y[x]=+y[x]+u,y[++x]=+y[x]+l;o.pop(),o=o.concat(L(y,g));break;case"O":o.pop(),y=T(u,l,h[1],h[2]),y.push(y[0]),o=o.concat(y);break;case"U":o.pop(),o=o.concat(T(u,l,h[1],h[2],h[3])),p=["U"].concat(o[o.length-1].slice(-2));break;case"M":c=+h[1]+u,f=+h[2]+l;default:for(x=1,b=h.length;x<b;x++)p[x]=+h[x]+(x%2?u:l)}else if("R"==r)y=[u,l].concat(h.slice(1)),o.pop(),o=o.concat(L(y,g)),p=["R"].concat(h.slice(-2));else if("O"==r)o.pop(),y=T(u,l,h[1],h[2]),y.push(y[0]),o=o.concat(y);else if("U"==r)o.pop(),o=o.concat(T(u,l,h[1],h[2],h[3])),p=["U"].concat(o[o.length-1].slice(-2));else for(var w=0,C=h.length;w<C;w++)p[w]=h[w];if("O"!=(r=r.toUpperCase()))switch(p[0]){case"Z":u=+c,l=+f;break;case"H":u=p[1];break;case"V":l=p[1];break;case"M":c=p[p.length-2],f=p[p.length-1];default:u=p[p.length-2],l=p[p.length-1]}}return o.toString=a,n.abs=s(o),o}function k(t,e,n,r){return[t,e,n,r,n,r]}function D(t,e,n,r,i,o){return[1/3*t+2/3*n,1/3*e+2/3*r,1/3*i+2/3*n,1/3*o+2/3*r,i,o]}function N(e,n,r,i,o,a,s,u,l,c){var f,d=120*$/180,p=$/180*(+o||0),h=[],g=t._.cacher(function(t,e,n){return{x:t*I.cos(n)-e*I.sin(n),y:t*I.sin(n)+e*I.cos(n)}});if(!r||!i)return[e,n,u,l,u,l];if(c)E=c[0],T=c[1],C=c[2],F=c[3];else{f=g(e,n,-p),e=f.x,n=f.y,f=g(u,l,-p),u=f.x,l=f.y;var v=(I.cos($/180*o),I.sin($/180*o),(e-u)/2),m=(n-l)/2,y=v*v/(r*r)+m*m/(i*i);y>1&&(y=I.sqrt(y),r*=y,i*=y);var x=r*r,b=i*i,w=(a==s?-1:1)*I.sqrt(G((x*b-x*m*m-b*v*v)/(x*m*m+b*v*v))),C=w*r*m/i+(e+u)/2,F=w*-i*v/r+(n+l)/2,E=I.asin(((n-F)/i).toFixed(9)),T=I.asin(((l-F)/i).toFixed(9));E=e<C?$-E:E,T=u<C?$-T:T,E<0&&(E=2*$+E),T<0&&(T=2*$+T),s&&E>T&&(E-=2*$),!s&&T>E&&(T-=2*$)}var S=T-E;if(G(S)>d){var A=T,k=u,D=l;T=E+d*(s&&T>E?1:-1),u=C+r*I.cos(T),l=F+i*I.sin(T),h=N(u,l,r,i,o,0,s,k,D,[T,A,C,F])}S=T-E;var B=I.cos(E),j=I.sin(E),q=I.cos(T),L=I.sin(T),M=I.tan(S/4),P=4/3*r*M,O=4/3*i*M,_=[e,n],H=[e+P*j,n-O*B],R=[u+P*L,l-O*q],z=[u,l];if(H[0]=2*_[0]-H[0],H[1]=2*_[1]-H[1],c)return[H,R,z].concat(h);h=[H,R,z].concat(h).join().split(",");for(var W=[],V=0,X=h.length;V<X;V++)W[V]=V%2?g(h[V-1],h[V],p).y:g(h[V],h[V+1],p).x;return W}function B(t,e,n,r,i,o,a,s){for(var u,l,c,f,d,p,h,g,v=[],m=[[],[]],y=0;y<2;++y)if(0==y?(l=6*t-12*n+6*i,u=-3*t+9*n-9*i+3*a,c=3*n-3*t):(l=6*e-12*r+6*o,u=-3*e+9*r-9*o+3*s,c=3*r-3*e),G(u)<1e-12){if(G(l)<1e-12)continue;0<(f=-c/l)&&f<1&&v.push(f)}else h=l*l-4*c*u,g=I.sqrt(h),h<0||(d=(-l+g)/(2*u),0<d&&d<1&&v.push(d),0<(p=(-l-g)/(2*u))&&p<1&&v.push(p));for(var x,b=v.length,w=b;b--;)f=v[b],x=1-f,m[0][b]=x*x*x*t+3*x*x*f*n+3*x*f*f*i+f*f*f*a,m[1][b]=x*x*x*e+3*x*x*f*r+3*x*f*f*o+f*f*f*s;return m[0][w]=t,m[1][w]=e,m[0][w+1]=a,m[1][w+1]=s,m[0].length=m[1].length=w+2,{min:{x:z.apply(0,m[0]),y:z.apply(0,m[1])},max:{x:W.apply(0,m[0]),y:W.apply(0,m[1])}}}function j(t,e){var n=!e&&i(t);if(!e&&n.curve)return s(n.curve);for(var r=A(t),o=e&&A(e),a={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},u={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},l=(function(t,e,n){var r,i;if(!t)return["C",e.x,e.y,e.x,e.y,e.x,e.y];switch(!(t[0]in{T:1,Q:1})&&(e.qx=e.qy=null),t[0]){case"M":e.X=t[1],e.Y=t[2];break;case"A":t=["C"].concat(N.apply(0,[e.x,e.y].concat(t.slice(1))));break;case"S":"C"==n||"S"==n?(r=2*e.x-e.bx,i=2*e.y-e.by):(r=e.x,i=e.y),t=["C",r,i].concat(t.slice(1));break;case"T":"Q"==n||"T"==n?(e.qx=2*e.x-e.qx,e.qy=2*e.y-e.qy):(e.qx=e.x,e.qy=e.y),t=["C"].concat(D(e.x,e.y,e.qx,e.qy,t[1],t[2]));break;case"Q":e.qx=t[1],e.qy=t[2],t=["C"].concat(D(e.x,e.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"].concat(k(e.x,e.y,t[1],t[2]));break;case"H":t=["C"].concat(k(e.x,e.y,t[1],e.y));break;case"V":t=["C"].concat(k(e.x,e.y,e.x,t[1]));break;case"Z":t=["C"].concat(k(e.x,e.y,e.X,e.Y))}return t}),c=function(t,e){if(t[e].length>7){t[e].shift();for(var n=t[e];n.length;)d[e]="A",o&&(p[e]="A"),t.splice(e++,0,["C"].concat(n.splice(0,6)));t.splice(e,1),m=W(r.length,o&&o.length||0)}},f=function(t,e,n,i,a){t&&e&&"M"==t[a][0]&&"M"!=e[a][0]&&(e.splice(a,0,["M",i.x,i.y]),n.bx=0,n.by=0,n.x=t[a][1],n.y=t[a][2],m=W(r.length,o&&o.length||0))},d=[],p=[],h="",g="",v=0,m=W(r.length,o&&o.length||0);v<m;v++){r[v]&&(h=r[v][0]),"C"!=h&&(d[v]=h,v&&(g=d[v-1])),r[v]=l(r[v],a,g),"A"!=d[v]&&"C"==h&&(d[v]="C"),c(r,v),o&&(o[v]&&(h=o[v][0]),"C"!=h&&(p[v]=h,v&&(g=p[v-1])),o[v]=l(o[v],u,g),"A"!=p[v]&&"C"==h&&(p[v]="C"),c(o,v)),f(r,o,a,u,v),f(o,r,u,a,v);var y=r[v],x=o&&o[v],b=y.length,w=o&&x.length;a.x=y[b-2],a.y=y[b-1],a.bx=R(y[b-4])||a.x,a.by=R(y[b-3])||a.y,u.bx=o&&(R(x[w-4])||u.x),u.by=o&&(R(x[w-3])||u.y),u.x=o&&x[w-2],u.y=o&&x[w-1]}return o||(n.curve=s(r)),o?[r,o]:r}function q(t,e){if(!e)return t;var n,r,i,o,a,s,u;for(t=j(t),i=0,a=t.length;i<a;i++)for(u=t[i],o=1,s=u.length;o<s;o+=2)n=e.x(u[o],u[o+1]),r=e.y(u[o],u[o+1]),u[o]=n,u[o+1]=r;return t}function L(t,e){for(var n=[],r=0,i=t.length;i-2*!e>r;r+=2){var o=[{x:+t[r-2],y:+t[r-1]},{x:+t[r],y:+t[r+1]},{x:+t[r+2],y:+t[r+3]},{x:+t[r+4],y:+t[r+5]}];e?r?i-4==r?o[3]={x:+t[0],y:+t[1]}:i-2==r&&(o[2]={x:+t[0],y:+t[1]},o[3]={x:+t[2],y:+t[3]}):o[0]={x:+t[i-2],y:+t[i-1]}:i-4==r?o[3]=o[2]:r||(o[0]={x:+t[r],y:+t[r+1]}),n.push(["C",(-o[0].x+6*o[1].x+o[2].x)/6,(-o[0].y+6*o[1].y+o[2].y)/6,(o[1].x+6*o[2].x-o[3].x)/6,(o[1].y+6*o[2].y-o[3].y)/6,o[2].x,o[2].y])}return n}var M=e.prototype,P=t.is,O=t._.clone,_="hasOwnProperty",H=/,?([a-z]),?/gi,R=parseFloat,I=Math,$=I.PI,z=I.min,W=I.max,V=I.pow,G=I.abs,X=l(1),U=l(),Y=l(0,1),Q=t._unit2px,J={path:function(t){return t.attr("path")},circle:function(t){var e=Q(t);return T(e.cx,e.cy,e.r)},ellipse:function(t){var e=Q(t);return T(e.cx||0,e.cy||0,e.rx,e.ry)},rect:function(t){var e=Q(t);return E(e.x||0,e.y||0,e.width,e.height,e.rx,e.ry)},image:function(t){var e=Q(t);return E(e.x||0,e.y||0,e.width,e.height)},line:function(t){return"M"+[t.attr("x1")||0,t.attr("y1")||0,t.attr("x2"),t.attr("y2")]},polyline:function(t){return"M"+t.attr("points")},polygon:function(t){return"M"+t.attr("points")+"z"},deflt:function(t){var e=t.node.getBBox();return E(e.x,e.y,e.width,e.height)}};t.path=i,t.path.getTotalLength=X,t.path.getPointAtLength=U,t.path.getSubpath=function(t,e,n){if(this.getTotalLength(t)-n<1e-6)return Y(t,e).end;var r=Y(t,n,1);return e?Y(r,e).end:r},M.getTotalLength=function(){if(this.node.getTotalLength)return this.node.getTotalLength()},M.getPointAtLength=function(t){return U(this.attr("d"),t)},M.getSubpath=function(e,n){return t.path.getSubpath(this.attr("d"),e,n)},t._.box=o,t.path.findDotsAtSegment=c,t.path.bezierBBox=f,t.path.isPointInsideBBox=d,t.closest=function(e,n,r,i){for(var a=100,s=o(e-a/2,n-a/2,a,a),u=[],l=r[0].hasOwnProperty("x")?function(t){return{x:r[t].x,y:r[t].y}}:function(t){return{x:r[t],y:i[t]}},c=0;a<=1e6&&!c;){for(var f=0,p=r.length;f<p;f++){var h=l(f);if(d(s,h.x,h.y)){c++,u.push(h);break}}c||(a*=2,s=o(e-a/2,n-a/2,a,a))}if(1e6!=a){var g,v=1/0;for(f=0,p=u.length;f<p;f++){var m=t.len(e,n,u[f].x,u[f].y);v>m&&(v=m,u[f].len=m,g=u[f])}return g}},t.path.isBBoxIntersect=p,t.path.intersection=x,t.path.intersectionNumber=b,t.path.isPointInside=C,t.path.getBBox=F,t.path.get=J,t.path.toRelative=S,t.path.toAbsolute=A,t.path.toCubic=j,t.path.map=q,t.path.toString=a,t.path.clone=s}),r.plugin(function(t,r,i,o){var a=Math.max,s=Math.min,u=function(t){if(this.items=[],this.bindings={},this.length=0,this.type="set",t)for(var e=0,n=t.length;e<n;e++)t[e]&&(this[this.items.length]=this.items[this.items.length]=t[e],this.length++)},l=u.prototype;l.push=function(){for(var t,e,n=0,r=arguments.length;n<r;n++)(t=arguments[n])&&(e=this.items.length,this[e]=this.items[e]=t,this.length++);return this},l.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},l.forEach=function(t,e){for(var n=0,r=this.items.length;n<r;n++)if(!1===t.call(e,this.items[n],n))return this;return this},l.animate=function(r,i,o,a){"function"!=typeof o||o.length||(a=o,o=n.linear),r instanceof t._.Animation&&(a=r.callback,o=r.easing,i=o.dur,r=r.attr);var s=arguments;if(t.is(r,"array")&&t.is(s[s.length-1],"array"))var u=!0;var l,c=function(){l?this.b=l:l=this.b},f=0,d=this,p=a&&function(){++f==d.length&&a.call(this)};return this.forEach(function(t,n){e.once("snap.animcreated."+t.id,c),u?s[n]&&t.animate.apply(t,s[n]):t.animate(r,i,o,p)})},l.remove=function(){for(;this.length;)this.pop().remove();return this},l.bind=function(t,e,n){var r={};if("function"==typeof e)this.bindings[t]=e;else{var i=n||t;this.bindings[t]=function(t){r[i]=t,e.attr(r)}}return this},l.attr=function(t){var e={};for(var n in t)this.bindings[n]?this.bindings[n](t[n]):e[n]=t[n];for(var r=0,i=this.items.length;r<i;r++)this.items[r].attr(e);return this},l.clear=function(){for(;this.length;)this.pop()},l.splice=function(t,e,n){t=t<0?a(this.length+t,0):t,e=a(0,s(this.length-t,e));var r,i=[],o=[],l=[];for(r=2;r<arguments.length;r++)l.push(arguments[r]);for(r=0;r<e;r++)o.push(this[t+r]);for(;r<this.length-t;r++)i.push(this[t+r]);var c=l.length;for(r=0;r<c+i.length;r++)this.items[t+r]=this[t+r]=r<c?l[r]:i[r-c];for(r=this.items.length=this.length-=e-c;this[r];)delete this[r++];return new u(o)},l.exclude=function(t){for(var e=0,n=this.length;e<n;e++)if(this[e]==t)return this.splice(e,1),!0;return!1},l.insertAfter=function(t){for(var e=this.items.length;e--;)this.items[e].insertAfter(t);return this},l.getBBox=function(){for(var t=[],e=[],n=[],r=[],i=this.items.length;i--;)if(!this.items[i].removed){var o=this.items[i].getBBox();t.push(o.x),e.push(o.y),n.push(o.x+o.width),r.push(o.y+o.height)}return t=s.apply(0,t),e=s.apply(0,e),n=a.apply(0,n),r=a.apply(0,r),{x:t,y:e,x2:n,y2:r,width:n-t,height:r-e,cx:t+(n-t)/2,cy:e+(r-e)/2}},l.clone=function(t){t=new u;for(var e=0,n=this.items.length;e<n;e++)t.push(this.items[e].clone());return t},l.toString=function(){return"Snap‘s set"},l.type="set",t.Set=u,t.set=function(){var t=new u;return arguments.length&&t.push.apply(t,Array.prototype.slice.call(arguments,0)),t}}),r.plugin(function(t,n,r,i){function o(t){var e=t[0];switch(e.toLowerCase()){case"t":return[e,0,0];case"m":return[e,1,0,0,1,0,0];case"r":return 4==t.length?[e,0,t[2],t[3]]:[e,0];case"s":return 5==t.length?[e,1,1,t[3],t[4]]:3==t.length?[e,1,1]:[e,1]}}function a(e,n,r){e=e||new t.Matrix,n=n||new t.Matrix,e=t.parseTransformString(e.toTransformString())||[],n=t.parseTransformString(n.toTransformString())||[];for(var i,a,s,u,l=Math.max(e.length,n.length),c=[],p=[],h=0;h<l;h++){if(s=e[h]||o(n[h]),u=n[h]||o(s),s[0]!=u[0]||"r"==s[0].toLowerCase()&&(s[2]!=u[2]||s[3]!=u[3])||"s"==s[0].toLowerCase()&&(s[3]!=u[3]||s[4]!=u[4])){e=t._.transform2matrix(e,r()),n=t._.transform2matrix(n,r()),c=[["m",e.a,e.b,e.c,e.d,e.e,e.f]],p=[["m",n.a,n.b,n.c,n.d,n.e,n.f]];break}for(c[h]=[],p[h]=[],i=0,a=Math.max(s.length,u.length);i<a;i++)i in s&&(c[h][i]=s[i]),i in u&&(p[h][i]=u[i])}return{from:d(c),to:d(p),f:f(c)}}function s(t){return t}function u(t){return function(e){return+e.toFixed(3)+t}}function l(t){return t.join(" ")}function c(e){return t.rgb(e[0],e[1],e[2],e[3])}function f(t){var e,n,r,i,o,a,s=0,u=[];for(e=0,n=t.length;e<n;e++){for(o="[",a=['"'+t[e][0]+'"'],r=1,i=t[e].length;r<i;r++)a[r]="val["+s+++"]";o+=a+"]",u[e]=o}return Function("val","return Snap.path.toString.call(["+u+"])")}function d(t){for(var e=[],n=0,r=t.length;n<r;n++)for(var i=1,o=t[n].length;i<o;i++)e.push(t[n][i]);return e}function p(t){return isFinite(t)}function h(e,n){return!(!t.is(e,"array")||!t.is(n,"array"))&&e.toString()==n.toString()}var g={},v=String;g.stroke=g.fill="colour",n.prototype.equal=function(t,n){return e("snap.util.equal",this,t,n).firstDefined()},e.on("snap.util.equal",function(e,n){var r,i,o=v(this.attr(e)||""),m=this;if("colour"==g[e])return r=t.color(o),i=t.color(n),{from:[r.r,r.g,r.b,r.opacity],to:[i.r,i.g,i.b,i.opacity],f:c};if("viewBox"==e)return r=this.attr(e).vb.split(" ").map(Number),i=n.split(" ").map(Number),{from:r,to:i,f:l};if("transform"==e||"gradientTransform"==e||"patternTransform"==e)return"string"==typeof n&&(n=v(n).replace(/\.{3}|\u2026/g,o)),o=this.matrix,n=t._.rgTransform.test(n)?t._.transform2matrix(n,this.getBBox()):t._.transform2matrix(t._.svgTransform2string(n),this.getBBox()),a(o,n,function(){return m.getBBox(1)});if("d"==e||"path"==e)return r=t.path.toCubic(o,n),{from:d(r[0]),to:d(r[1]),f:f(r[0])};if("points"==e)return r=v(o).split(t._.separator),i=v(n).split(t._.separator),{from:r,to:i,f:function(t){return t}};if(p(o)&&p(n))return{from:parseFloat(o),to:parseFloat(n),f:s};var y=o.match(/[%a-z]+$/i),x=v(n).match(/[%a-z]+$/i);return y&&h(y,x)?{from:parseFloat(o),to:parseFloat(n),f:u(y)}:{from:this.asPX(e),to:this.asPX(e,n),f:s}})}),r.plugin(function(t,n,r,i){for(var o=n.prototype,a=("createTouch"in i.doc),s=["click","dblclick","mousedown","mousemove","mouseout","mouseover","mouseup","touchstart","touchmove","touchend","touchcancel"],u={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},l=(function(t,e){var n="y"==t?"scrollTop":"scrollLeft",r=e&&e.node?e.node.ownerDocument:i.doc;return r[n in r.documentElement?"documentElement":"body"][n]}),c=function(){return this.originalEvent.preventDefault()},f=function(){return this.originalEvent.stopPropagation()},d=function(t,e,n,r){var i=a&&u[e]?u[e]:e,o=function(i){var o=l("y",r),s=l("x",r);if(a&&u.hasOwnProperty(e))for(var d=0,p=i.targetTouches&&i.targetTouches.length;d<p;d++)if(i.targetTouches[d].target==t||t.contains(i.targetTouches[d].target)){var h=i;i=i.targetTouches[d],i.originalEvent=h,i.preventDefault=c,i.stopPropagation=f;break}var g=i.clientX+s,v=i.clientY+o;return n.call(r,i,g,v)};return e!==i&&t.addEventListener(e,o,!1),t.addEventListener(i,o,!1),function(){return e!==i&&t.removeEventListener(e,o,!1),t.removeEventListener(i,o,!1),!0}},p=[],h=function(t){for(var n,r=t.clientX,i=t.clientY,o=l("y"),s=l("x"),u=p.length;u--;){if(n=p[u],a){for(var c,f=t.touches&&t.touches.length;f--;)if(c=t.touches[f],c.identifier==n.el._drag.id||n.el.node.contains(c.target)){r=c.clientX,i=c.clientY,(t.originalEvent?t.originalEvent:t).preventDefault();break}}else t.preventDefault();var d=n.el.node;d.nextSibling,d.parentNode,d.style.display;r+=s,i+=o,e("snap.drag.move."+n.el.id,n.move_scope||n.el,r-n.el._drag.x,i-n.el._drag.y,r,i,t)}},g=function(n){t.unmousemove(h).unmouseup(g);for(var r,i=p.length;i--;)r=p[i],r.el._drag={},e("snap.drag.end."+r.el.id,r.end_scope||r.start_scope||r.move_scope||r.el,n),e.off("snap.drag.*."+r.el.id);p=[]},v=s.length;v--;)!function(e){t[e]=o[e]=function(n,r){if(t.is(n,"function"))this.events=this.events||[],this.events.push({name:e,f:n,unbind:d(this.node||document,e,n,r||this)});else for(var i=0,o=this.events.length;i<o;i++)if(this.events[i].name==e)try{this.events[i].f.call(this)}catch(t){}return this},t["un"+e]=o["un"+e]=function(t){for(var n=this.events||[],r=n.length;r--;)if(n[r].name==e&&(n[r].f==t||!t))return n[r].unbind(),n.splice(r,1),!n.length&&delete this.events,this;return this}}(s[v]);o.hover=function(t,e,n,r){return this.mouseover(t,n).mouseout(e,r||n)},o.unhover=function(t,e){return this.unmouseover(t).unmouseout(e)};var m=[];o.drag=function(n,r,i,o,a,s){function u(u,l,f){
(u.originalEvent||u).preventDefault(),c._drag.x=l,c._drag.y=f,c._drag.id=u.identifier,!p.length&&t.mousemove(h).mouseup(g),p.push({el:c,move_scope:o,start_scope:a,end_scope:s}),r&&e.on("snap.drag.start."+c.id,r),n&&e.on("snap.drag.move."+c.id,n),i&&e.on("snap.drag.end."+c.id,i),e("snap.drag.start."+c.id,a||o||c,l,f,u)}function l(t,n,r){e("snap.draginit."+c.id,c,t,n,r)}var c=this;if(!arguments.length){var f;return c.drag(function(t,e){this.attr({transform:f+(f?"T":"t")+[t,e]})},function(){f=this.transform().local})}return e.on("snap.draginit."+c.id,u),c._drag={},m.push({el:c,start:u,init:l}),c.mousedown(l),c},o.undrag=function(){for(var n=m.length;n--;)m[n].el==this&&(this.unmousedown(m[n].init),m.splice(n,1),e.unbind("snap.drag.*."+this.id),e.unbind("snap.draginit."+this.id));return!m.length&&t.unmousemove(h).unmouseup(g),this}}),r.plugin(function(t,n,r,i){var o=(n.prototype,r.prototype),a=String,s=t._.$;t.filter={},o.filter=function(e){var r=this;"svg"!=r.type&&(r=r.paper);var i=t.parse(a(e)),o=t._.id(),u=(r.node.offsetWidth,r.node.offsetHeight,s("filter"));return s(u,{id:o,filterUnits:"userSpaceOnUse"}),u.appendChild(i.node),r.defs.appendChild(u),new n(u)},e.on("snap.util.getattr.filter",function(){e.stop();var n=s(this.node,"filter");if(n){var r=a(n).match(/^\s*url\((.+)\)/);return r&&t.select(r[1])}}),e.on("snap.util.attr.filter",function(r){if(r instanceof n&&"filter"==r.type){e.stop();var i=r.node.id;i||(s(r.node,{id:r.id}),i=r.id),s(this.node,{filter:t.url(i)})}r&&"none"!=r||(e.stop(),this.node.removeAttribute("filter"))}),t.filter.blur=function(e,n){null==e&&(e=2);var r=null==n?e:[e,n];return t.format('<feGaussianBlur stdDeviation="{def}"/>',{def:r})},t.filter.blur.toString=function(){return this()},t.filter.shadow=function(e,n,r,i,o){return null==o&&(null==i?(o=r,r=4,i="#000"):(o=i,i=r,r=4)),null==r&&(r=4),null==o&&(o=1),null==e&&(e=0,n=2),null==n&&(n=e),i=t.color(i),t.format('<feGaussianBlur in="SourceAlpha" stdDeviation="{blur}"/><feOffset dx="{dx}" dy="{dy}" result="offsetblur"/><feFlood flood-color="{color}"/><feComposite in2="offsetblur" operator="in"/><feComponentTransfer><feFuncA type="linear" slope="{opacity}"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge>',{color:i,dx:e,dy:n,blur:r,opacity:o})},t.filter.shadow.toString=function(){return this()},t.filter.grayscale=function(e){return null==e&&(e=1),t.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0"/>',{a:.2126+.7874*(1-e),b:.7152-.7152*(1-e),c:.0722-.0722*(1-e),d:.2126-.2126*(1-e),e:.7152+.2848*(1-e),f:.0722-.0722*(1-e),g:.2126-.2126*(1-e),h:.0722+.9278*(1-e)})},t.filter.grayscale.toString=function(){return this()},t.filter.sepia=function(e){return null==e&&(e=1),t.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0"/>',{a:.393+.607*(1-e),b:.769-.769*(1-e),c:.189-.189*(1-e),d:.349-.349*(1-e),e:.686+.314*(1-e),f:.168-.168*(1-e),g:.272-.272*(1-e),h:.534-.534*(1-e),i:.131+.869*(1-e)})},t.filter.sepia.toString=function(){return this()},t.filter.saturate=function(e){return null==e&&(e=1),t.format('<feColorMatrix type="saturate" values="{amount}"/>',{amount:1-e})},t.filter.saturate.toString=function(){return this()},t.filter.hueRotate=function(e){return e=e||0,t.format('<feColorMatrix type="hueRotate" values="{angle}"/>',{angle:e})},t.filter.hueRotate.toString=function(){return this()},t.filter.invert=function(e){return null==e&&(e=1),t.format('<feComponentTransfer><feFuncR type="table" tableValues="{amount} {amount2}"/><feFuncG type="table" tableValues="{amount} {amount2}"/><feFuncB type="table" tableValues="{amount} {amount2}"/></feComponentTransfer>',{amount:e,amount2:1-e})},t.filter.invert.toString=function(){return this()},t.filter.brightness=function(e){return null==e&&(e=1),t.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}"/><feFuncG type="linear" slope="{amount}"/><feFuncB type="linear" slope="{amount}"/></feComponentTransfer>',{amount:e})},t.filter.brightness.toString=function(){return this()},t.filter.contrast=function(e){return null==e&&(e=1),t.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}" intercept="{amount2}"/><feFuncG type="linear" slope="{amount}" intercept="{amount2}"/><feFuncB type="linear" slope="{amount}" intercept="{amount2}"/></feComponentTransfer>',{amount:e,amount2:.5-e/2})},t.filter.contrast.toString=function(){return this()}}),r.plugin(function(t,e,n,r,i){var o=t._.box,a=t.is,s=function(){return"T"+this.dx+","+this.dy};e.prototype.getAlign=function(t,e){null==e&&a(t,"string")&&(e=t,t=null),t=t||this.paper;var n=t.getBBox?t.getBBox():o(t),r=this.getBBox(),i={};switch(e=e&&e.match(/^[^a-z]*([tbmlrc])/i),e=e?e[1].toLowerCase():"c"){case"t":i.dx=0,i.dy=n.y-r.y;break;case"b":i.dx=0,i.dy=n.y2-r.y2;break;case"m":i.dx=0,i.dy=n.cy-r.cy;break;case"l":i.dx=n.x-r.x,i.dy=0;break;case"r":i.dx=n.x2-r.x2,i.dy=0;break;default:i.dx=n.cx-r.cx,i.dy=0}return i.toString=s,i},e.prototype.align=function(t,e){return this.transform("..."+this.getAlign(t,e))}}),r.plugin(function(e,n,r,i){function o(t){t=t.split(/(?=#)/);var e=new String(t[5]);return e[50]=t[0],e[100]=t[1],e[200]=t[2],e[300]=t[3],e[400]=t[4],e[500]=t[5],e[600]=t[6],e[700]=t[7],e[800]=t[8],e[900]=t[9],t[10]&&(e.A100=t[10],e.A200=t[11],e.A400=t[12],e.A700=t[13]),e}e.mui={},e.flat={},e.mui.red=o("#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000"),e.mui.pink=o("#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162"),e.mui.purple=o("#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF"),e.mui.deeppurple=o("#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA"),e.mui.indigo=o("#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE"),e.mui.blue=o("#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF"),e.mui.lightblue=o("#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA"),e.mui.cyan=o("#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4"),e.mui.teal=o("#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5"),e.mui.green=o("#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853"),e.mui.lightgreen=o("#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17"),e.mui.lime=o("#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00"),e.mui.yellow=o("#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600"),e.mui.amber=o("#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00"),e.mui.orange=o("#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00"),e.mui.deeporange=o("#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00"),e.mui.brown=o("#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723"),e.mui.grey=o("#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121"),e.mui.bluegrey=o("#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238"),e.flat.turquoise="#1abc9c",e.flat.greensea="#16a085",e.flat.sunflower="#f1c40f",e.flat.orange="#f39c12",e.flat.emerland="#2ecc71",e.flat.nephritis="#27ae60",e.flat.carrot="#e67e22",e.flat.pumpkin="#d35400",e.flat.peterriver="#3498db",e.flat.belizehole="#2980b9",e.flat.alizarin="#e74c3c",e.flat.pomegranate="#c0392b",e.flat.amethyst="#9b59b6",e.flat.wisteria="#8e44ad",e.flat.clouds="#ecf0f1",e.flat.silver="#bdc3c7",e.flat.wetasphalt="#34495e",e.flat.midnightblue="#2c3e50",e.flat.concrete="#95a5a6",e.flat.asbestos="#7f8c8d",e.importMUIColors=function(){for(var n in e.mui)e.mui.hasOwnProperty(n)&&(t[n]=e.mui[n])}}),r}),function(t,e){if(0!==t(".our-team").length){var n=e("#team-svg"),r=n.selectAll(".team-member"),i=n.selectAll(".team-member .drawing"),o=t(".about-item"),a=function(){i.forEach(function(t){t.removeClass("active")})},s=function(t){o.removeClass("active"),o.filter('[name="'+t+'"]').addClass("active")};r.forEach(function(t){var e=t.select(".area"),n=t.select(".drawing");e.hover(function(){this.addClass("hover"),n.addClass("ready")},function(){this.removeClass("hover"),n.removeClass("ready")});var r=function(){a(),n.addClass("active"),s(t.attr("name"))};e.click(r),t.hasClass("active")&&r()}),t(".contact-artem").on("click",function(){t(this).addClass("removed"),t(this).siblings(".contacts").addClass("active"),t(this).off("click")})}}(jQuery,Snap);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
